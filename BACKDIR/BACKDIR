/*                         rexx                               *
 * Name:      backup_dir.rex                                  *
 *                                                            *
 * Function:  Backup request directory (recursively) to       *
 *            requested directory/backup_dyymmdd/             *
 *                                                            *
 *            if the backup directory exists then the name    *
 *            will be changed to add the time:                *
 *            /backup-direct/backup_dyymmdd.thhmm/            *
 *                                                            *
 *            NOTE: The backup directory must be preallocated *
 *                  and then the backups will be placed under *
 *                  it.                                       *
 *                                                            *
 *            Only the last n directories will be kept        *
 *                                                            *
 * Parm file format:                                          *
 *                                                            *
 *        # Dir backup parmfile                               *
 *        #                                                   *
 *        DirLoc      /u/bozo/                                *
 *        History     5                                       *
 *        BackupDir   /tmp/backup_bozo/                       *
 *        #                                                   *
 *                                                            *
 * Sample parm in /usr/local/bin/backup_dir.parm              *
 *                                                            *
 * Syntax:    called from crontab                             *
 *                                                            *
 * Sample Crontab entry (shifted for comments)                *
 * 5 0 * * * /usr/local/bin/backup_dir.rex parmfile >         *
 *           /tmp/xxx.backup.log                              *
 *                                                            *
 * Dependencies:   Must be under uid(0)                       *
 *                 (which it will under crontab)              *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            07/11/17 - Add -m to CP to retain date/time     *
 *            07/06/17 - Check for parms                      *
 *                     - add date/time to report              *
 *                     - additional cleanup                   *
 *            07/05/17 - Add test and create of backup dir    *
 *            07/03/17 - Crafted from ssh2_backup.rex to      *
 *                       be more generalized                  *
 *            04/06/17 - Correct cleanup                      *
 *            03/28/17 - Some cleanup and more messages       *
 *            03/23/17 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- */

 parse arg parmfile

/* ------------------------------------ *
 * Read in the parm file for processing *
 * ------------------------------------ */
 cmd = 'cat' parmfile
 rc = bpxwunix(cmd,,stdout.,stderr.)

/* -------------------- *
 * Process the parmfile *
 * -------------------- */
 say ' '
 say 'Processing parmfile:' parmfile
 say ' '

 parse value '' with dirloc backup_dir
 history = 5

 do i = 1 to stdout.0
    if left(stdout.i,1) = '#' then iterate   /* ignore comments */
    parse value stdout.i with keyword value
    Select
      When translate(keyword) = 'DIRLOC' then
           dirloc = strip(value)
      When translate(keyword) = 'HISTORY' then
           history = strip(value)
      When translate(keyword) = 'BACKUPDIR' then
           backup_dir = strip(value)
      Otherwise nop
      end
    end

/* ------------------------ *
 | Log our processing parms |
 * ------------------------ */
 say 'Directory Backup Processing:' date() time()
 say ' '
 say 'Log rotation parms:'
 say ' '
 say "DirLoc::   " dirloc
 say "BackUpDir: " backup_dir
 say "History:   " history

/* ---------------------------------------------- *
 | Check that the parmfile was read and had valid |
 | parameters.                                    |
 * ---------------------------------------------- */
 bad = 0
 if strip(dirloc) = '' then bad = 'DIRLOC missing'
 if strip(backup_dir) = '' then do
    if bad = 0
       then bad = 'BACKUPDIR missing'
       else bad = bad 'and BACKUPDIR missing'
    end
 if bad /= 0 then do
    say ' '
    say 'ERROR:' bad
    say ' '
    say 'Exiting.....'
    exit 16
    end

/* ------------------------------------------------- *
 | Test the target backup directory and create if it |
 | does not exist.                                   |
 * ------------------------------------------------- */
 cmd = 'ls -la' backup_dir
 rc = bpxwunix(cmd,,stdout.,stderr.)
 if stderr.0 = 1 then do
    cmd = 'mkdir' backup_dir
    rc = bpxwunix(cmd,,stdout.,stderr.)
    if stderr.0 = 0 then do
       say ' '
       say 'Creating backup directory:' backup_dir
       end
    else do
         say ' '
         say '*************************************'
         say ' Error creating the backup directory:'
         do i = 1 to stderr.0
            say stderr.i
            end
         say '*************************************'
         exit 8
         end
    end

/* ------------------------------------- *
 | 1. Determine the new backup directory |
 | 2. Determine if it exists             |
 |    - Report and exit if it does       |
 | 3. mkdir the new backup directory     |
 * ------------------------------------- */
 today = date('o')
 backup = 'backup_d'left(today,2)''substr(today,4,2)''right(today,2)
 say ' '
 say 'New backup directory will be:' backup_dir''backup
 say 'For' today

 say ' '
 say 'getting list of' dirloc 'files:'
 say ' '
 cmd = 'ls -lat' backup_dir
 rc = bpxwunix(cmd,,dirout.,stderr.)
 dir_start = 0
 do id = 1 to dirout.0
    dir_start = dir_start + 1
    if word(dirout.id,1) = 'total' then leave
    end
 do i = id+1 to dirout.0
    parse value dirout.i with x1 x2 x3 x4 size x6 x7 x8 dir
    if dir = '' then iterate
    if dir = backup then do
       parse value time('c') with h':'m
       obackup = backup
       backup = backup'.t'h''left(m,2)
       say 'Changing backup:' obackup 'to' backup
       end
    end

/* ----------------------------- *
 | Make the new target directory |
 * ----------------------------- */
 cmd = 'mkdir' backup_dir''backup
 say ' '
 say 'Processing command:' cmd
 say ' '
 rc = bpxwunix(cmd,,stdout.,stderr.)
 do i = 1 to stdout.0
       say stdout.i
       end
 do i = 1 to stderr.0
       say stderr.i
       end

/* ----------------------------- *
 | Now copy the files for backup |
 * ----------------------------- */
 cmd = "cp -Rm" dirloc"/" backup_dir''backup
 say cmd
 Address SH cmd
 say 'Copy return code is:' rc
 say ' '

/* ------------------------ *
 | Now clean up old backups |
 * ------------------------ */
 say 'Beginning cleanup'
 say ' '
 remove = dirout.0 - history - 1 - dir_start
 if remove < 0 then remove = 0
 say ' '
 say 'Plan to remove' remove 'files.'
 say ' '
 if remove > 0 then do
 say 'Remove:' remove
    do i = dirout.0+dir_start to 1 by -1
       parse value dirout.i with x1 x2 x3 x4 size x6 x7 x8 dir .
       if left(x1,1) /= 'd' then iterate
       say '*'dir'*'
       if left(dir,1) = '.' then iterate
       cmd = 'rm -r' backup_dir''dir
       say 'Removing:' cmd
       Address SH cmd
       remove = remove - 1
       if remove = 0 then leave
       end
    end
 say ' '

/* ----------------------------- *
 | Now list the backup directory |
 * ----------------------------- */
 cmd = "ls -lat" backup_dir
 say 'List the backup directories:'
 say ' '
 say cmd
 say ' '
 Address SH cmd
 say ' '
 say 'Now list the current backup directory:'
 say ' '
 cmd = "ls -latR" backup_dir''backup
 say cmd
 say ' '
 Address SH cmd

 Exit 0
