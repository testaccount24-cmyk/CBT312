/* --------------------  rexx procedure  -------------------- *
 | Name:      erc                                             |
 |                                                            |
 | Function:  edit the run commands pds                       |
 |                                                            |
 | Syntax:    %erc option member                              |
 |                                                            |
 |            member is optional                              |
 |                                                            |
 |            options:                                        |
 |                                                            |
 |            -E to use Edit instead of View                  |
 |            /SET to prompt user to change the command pds   |
 |            ? or Help for tutorial                          |
 |                                                            |
 | Usage Notes: Used to edit the run commands pds so that     |
 |              runc may be used on the members               |
 |                                                            |
 |              When run if the ercdsn variable is not        |
 |              found in ispf then the user will be           |
 |              prompted for the dataset name                 |
 |                                                            |
 |              ERC should be called from the ISPF Command    |
 |              table in applid ISR.                          |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            12/09/16 - Update to loadispf routine           |
 |            12/07/16 - Add ? or Help for Tutorial           |
 |            11/30/16 - Add -E option and make View default  |
 |                     - Support TSO PROFILE NOPREFIX         |
 |                     - if the command dataset is prefixed   |
 |                       with the users userid then default   |
 |                       to Edit instead of View              |
 |            11/22/16 - Change back to pure edit forget      |
 |                       Memlist                              |
 |            11/21/16 - Change to use MEMLIST for 9 char     |
 |                       selection field                      |
 |            11/18/16 - Make dsn prompt a popup              |
 |            11/17/16 - Add ercdsn                           |
 |                     - Make sure running under ISR applid   |
 |            11/16/16 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */

/* ---------------------------------------- *
 | Get the member name, if any, to be used. |
 |                                          |
 | May also be a mask (e.g. abc*)           |
 * ---------------------------------------- */
 arg member

/* ------------------------------------- *
 | Setup the ISPF addressing environment |
 * ------------------------------------- */
 Address ISPExec

/* -------------------------------------------- *
 | Check for ISPF Applid of ISR and if not then |
 | recurse into ISR.                            |
 * -------------------------------------------- */
 "Vget (Zapplid)"
 "Control Errors Return"
 if zapplid <> "ISR" then do
     "Select Cmd(%"sysvar('sysicmd') member") newappl(isr)"
    exit 0
    end

/* ---------------------------------------- *
 | Check for Help and then Display Tutorial |
 * ---------------------------------------- */
 if abbrev("HELP",member,1) = 1 then call help
 if member = '?'     then call help

/* ---------------------------------------------- *
 | Check for the ERCDSN variable that defines the |
 | dataset where the command members are located. |
 |                                                |
 | If not found then prompt the user for it.      |
 * ---------------------------------------------- */
 if member = '/SET' then call set_dsn
 else do
      'vget (ercdsn) profile'
      if ercdsn = '' then call set_dsn
      end

/* ---------------------------------- *
 | Remove quotes from ERCDSN if there |
 * ---------------------------------- */
 if left(ercdsn,1) = "'"
   then parse value ercdsn with "'"cdsn"'"
    else do
         if sysvar('syspref') /= '' then hlq = sysvar('syspref')
                                    else hlq = sysvar('sysuid')
         cdsn = hlq'.'ercdsn
         end

/* ------------------- *
 | Check option for -E |
 * ------------------- */
 if words(member) > 1 then parse value member with option member
 if option = '-E' then ev = 'Edit'
                  else ev = 'View'

/* ----------------------------------------------------- *
 | Check for a command dataset that is prefixed with the |
 | active users userid and if so then default to Edit.   |
 * ----------------------------------------------------- */
 userid = sysvar('sysuid')
 if left(ercdsn,1) = "'" then do
    if userid = substr(ercdsn,2,length(userid)) then ev = 'Edit'
    end
 else if sysvar('syspref') = userid then ev = 'Edit'

/* ----------------------------------------- *
 | Now open Edit or View on the Commands DSN |
 * ----------------------------------------- */
 if member = ''
   then ev "Dataset('"cdsn"')"
   else ev "Dataset('"cdsn"("member")')"

 Exit

/* --------------------------------------- *
 | Prompt the user for the command dataset |
 * --------------------------------------- */
 Set_dsn: Procedure expose ercdsn
/* ------------------------------- *
 | Dynamically load the ISPF Panel |
 * ------------------------------- */
 load_info = loadispf()

/* --------------------------------------- *
 | Prompt the user and save the ERCDSN var |
 * --------------------------------------- */
 do forever
    'Addpop'
    'Display Panel(ercprmpt)'
    if rc > 0 then leave
    'Rempop'
    end

 if ercdsn /= '' then do
    'vput (ercdsn) profile'
    zedsmsg = 'ERC Dataset Set'
    zedlmsg = 'ERC Dataset has been set to:' ercdsn
    'Setmsg msg(isrz001)'
    end

/* -------------------------------------------- *
 | Done with the panel so release the resources |
 * -------------------------------------------- */
 do until length(load_info) = 0
    parse value load_info with dd libd load_info
    "libdef" libd
    address tso "free f("dd")"
    end

/* ---------------------- *
 | Now return and process |
 * ---------------------- */
 Return

/* ----------------------------------------------------------- *
 | Help Procedure                                              |
 |                                                             |
 | This section will call the LoadISPF routine to dynamnically |
 | load the ISPF panels and then invoke the ISPF tutorial      |
 | routine.                                                    |
 * ----------------------------------------------------------- */
 Help:
 Address ISPEXEC
 load_info = loadispf()
 'Select pgm(isptutor) parm(#erc)'
 do until length(load_info) = 0
    parse value load_info with dd libd load_info
    "libdef" libd
    address tso "free f("dd")"
    end
 exit

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
>START
>PANEL ercprmpt
)Attr Default(%+_)
   @ type(output) intens(high)  caps(off) just(left )
   $ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
   + type(text) intens(low)
)Body window(69,9) expand(\\)
%-\-\-+RUNC Command Dataset Prompt%-\-\-
%Command ===>_zcmd
+
+Enter Dataset Name:$ercdsn                                        +
+
+Note: Use ERC /SET to change this dataset name in the future
+
+Press PF3 to continue
)Init
 .cursor = ercdsn
)Proc
  ver (&ercdsn,dsnamepq)
)End
>PANEL #ERC
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+-\-\-(%ERC - Command+)-\-\-%Tutorial
%Command ===>_ZCMD
+
+The ERC command is an ISPF command to open the PDS or PDS Member of the
+command dataset for use with the RUNC ISPF Edit command.
+
+Syntax: %ERC options
+
+Options:  %blank+Display member list of Command PDS (default)
+          %?+or%HELP+... Display tutorial
+          %/SET+........ Prompt to change the Command PDS dataset name
+          %member+...... Member Name or Member Mask
+
)PROC
)END
>END
