         TITLE '   E C H O   '
************************************************************
*                                                          *
*        'ECHO' TSO COMMAND                                *
*                                                          *
************************************************************
         SPACE
* WRITTEN NOVEMBER 5 2016
* THIS TSO COMMAND ECHOES THE TEXT ON THE COMMAND LINE TO THE SCREEN.
* IT COULD BE INSTALLED AS 'ECHO', OR ANYTHING ELSE, BUT
* IF THERE ALREADY IS A COMMAND NAMED 'ECHO' ON THE SYSTEM
* THEN IT MIGHT BE NECESSARY TO USE A NAME OTHER THAN 'ECHO'.
*
* SYNTAX:
*  ECHO TEXT TO BE DISPLAYED
*  ECHO 'TEXT TO BE DISPLAYED
*  ECHO 'TEXT TO BE DISPLAYED'
*
* IF NO TEXT IS SPECIFIED, A BLANK LINE IS DISPLAYED.
* IF THE TEXT BEGINS WITH A QUOTE THEN (1) THE QUOTE IS REMOVED
* AND (2) AN OPTIONAL TRAILING QUOTE, IF PRESENT, WILL BE REMOVED.
*
* A TRAILING QUOTE IS ONLY NEEDED IF THE QUOTED TEXT TO BE DISPLAYED
* HAS A TRAILING PLUS (+) OR MINUS (-) BECAUSE THEY NORMALLY
* INDICATE CONTINUATION OF A COMMAND LINE.
* A TRAILING QUOTE IS NEEDED IN ISPF OUTSIDE A REXX EXEC OR CLIST,
* IF THE TEXT BEGINS WITH A QUOTE, AS ISPF CHECKS FOR MATCHED QUOTES.
*
* TO DISPLAY SOMETHING WITH A LEADING QUOTE, SPECIFY 2 LEADING QUOTES.
* QUOTES WITHIN A QUOTED STRING DO NOT NEED TO BE DOUBLED, UNLESS
* THE COMMAND IS RUN IN ISPF OUTSIDE A REXX EXEC OR A CLIST.
* IF THEY ARE DOUBLED THEN THEY WILL BE DISPLAYED AS A SINGLE QUOTE.
*
* UNQUOTED STRINGS THAT ARE INDENTED WILL DISPLAY WITH LEADING SPACES.
*
* EXAMPLES:
*  ECHO THIS IS TEXT
*  ECHO  THIS IS TEXT WITH A LEADING SPACE
*  ECHO   THIS IS TEXT WITH 2 LEADING SPACES
*  ECHO '  THIS IS TEXT WITH 2 LEADING SPACES'
*  ECHO   '  THIS IS TEXT WITH 2 LEADING SPACES'
*  ECHO IT'S TEXT WITH A SINGLE QUOTE
*  ECHO 'IT'S TEXT WITH A SINGLE QUOTE
*  ECHO 'IT'S TEXT WITH A SINGLE QUOTE'
*  ECHO 'IT''S TEXT WITH A DOUBLED SINGLE QUOTE'
*  ECHO 'THIS IS TEXT WITH A TRAILING HYPHEN -'
*  ECHO 'THIS IS TEXT WITH A TRAILING PLUS SIGN +'
*  ECHO 'THIS IS TEXT WITH NO TRAILING QUOTE NEEDED
*  ECHO      (PRINTS BLANK LINE)
*  ECHO '    (PRINTS BLANK LINE)
*  ECHO ''   (PRINTS BLANK LINE)
*  ECHO '''  (PRINTS ONE QUOTE)
*  ECHO '''' (PRINTS ONE QUOTE)
*
* A COMMAND WITH AN UNEVEN NUMBER OF QUOTES, IF ENTERED WITHIN ISPF
* AND OUTSIDE OF A REXX EXEC OR A CLIST, SUCH AS DIRECTLY ON PANEL 6,
* WILL BE FAILED BY ISPF WITH THIS MESSAGE:
*  ISPD289  MISMATCHED QUOTES - THE STRING CONTAINS AN UNEVEN NUMBER
*           OF QUOTES.
* THERE IS RARELY A NEED TO RUN THE 'ECHO' COMMAND DIRECTLY,
* OUTSIDE A REXX EXEC OR A CLIST, IN ISPF, EXCEPT FOR TESTING,
* BUT MESSAGE ISPD289 CAN BE AVOIDED BY SPECIFYING PAIRS OF QUOTES
* WHERE ONE OUTPUT QUOTE IS DESIRED. SO INSTEAD OF THESE COMMANDS:
*  ECHO LET'S BEGIN
*  ECHO 'LET'S BEGIN'
* THESE COMMANDS WILL PRODUCE THE SAME DESIRED RESULT:
*  ECHO LET''S BEGIN
*  ECHO 'LET''S BEGIN'
* THE SAME IS TRUE INSIDE A REXX EXEC OR A CLIST, BUT NOT NEEDED.
         SPACE
* INTERCEPT 'LINK' MACROS IMBEDDED IN PUTLINE & STACK
* TO MAKE SF=(E,LINKAREA) THE DEFAULT.
         MACRO
&NAME    LINK  &EP=,&SF=(E,LINKAREA)
&NAME    LA    15,&SF(2)
         LA    0,*+8
         B     *+12
         DC    CL8'&EP'
         ST    0,0(0,15)
         SVC   6             ISSUE LINK SVC
         MEND
         SPACE
ECHO     START
         USING *,R12
         B     @PROLOG-*(,R15)
         DC    AL1(5),CL5'ECHO'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATA24L)
@PROLOG  STM   14,12,12(R13)
         LR    R12,R15             BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1
         XC    0(72,R1),0(R1)
         USING @DATA24,R9
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         SPACE
         XC    LINKAREA(8),LINKAREA
         LA    R15,12
         STH   R15,RETCODE         SET RETCODE = 12
         MVI   DEBUG,0
         SPACE
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*        CHECK COMMAND BUFFER POINTED TO BY CPPLCBUF       *
*                                                          *
************************************************************
         SPACE
         CLI   DEBUG,0
         BE    NODEBUG1
         L     R1,CPPLCBUF
         LH    R0,0(,R1)           GET LENGTH
         LA    R15,OBUF
         BAL   R14,TOHEX1
         LA    R1,OBUF
         LR    R0,R15
         SR    R0,R1
         BAL   R14,PUTLINE
         SPACE
         L     R1,CPPLCBUF
         LH    R0,0(,R1)           GET LENGTH
         LH    R14,2(,R1)          GET OFFSET
         LA    R1,4(,R1)           POINT TO COMMAND
         SH    R0,=H'4'            REDUCE LENGTH BY 4
         AR    R1,R14              POINT TO OPERAND
         SR    R0,R14              REDUCE LENGTH BY OFFSET
         BZ    NODATA              NO OPERAND
         LA    R15,OBUF
         BAL   R14,TOHEX1
         LA    R1,OBUF
         LR    R0,R15
         SR    R0,R1
         BAL   R14,PUTLINE
NODATA   EQU   *
NODEBUG1 EQU   *
         SPACE
         L     R1,CPPLCBUF
         LH    R0,0(,R1)           GET LENGTH
         LH    R14,2(,R1)          GET OFFSET
         LA    R1,4(,R1)           POINT TO COMMAND
         SH    R0,=H'4'            REDUCE LENGTH BY 4
         AR    R1,R14              POINT TO OPERAND
         SR    R0,R14              REDUCE LENGTH BY OFFSET
         BZ    NULL                NO OPERAND
         CLI   0(R1),C''''         IF NOT QUOTED
         BE    QUOTED
*              BACK UP TO LAST CHAR OF COMMAND
LOOP     BCTR  R1,0
         A     R0,=F'1'
         CLI   0(R1),C' '
         BE    LOOP
*              POINT R1 TO OPERAND OR LEADING BLANKS
         LA    R1,2(,R1)
         S     R0,=F'2'
         BAL   R14,SQUEEZE         CHANGE ALL '' TO '
         LTR   R0,R0
         BZ    NULL
         BAL   R14,PUTLINE
         B     EXIT0
NULL     LA    R1,=C' '
         LA    R0,1
         BAL   R14,PUTLINE
         B     EXIT0
QUOTED   CH    R0,=H'1'            IF NOTHING BUT A SINGLE QUOTE
         BE    NULL
         LR    R15,R1
         AR    R15,R0              POINT PAST LAST CHAR
         BCTR  R15,0               POINT TO LAST CHAR
         LA    R1,1(,R1)           POINT PAST LEADING QUOTE
         BCTR  R0,0                REDUCE LENGTH BY 1
         CLI   0(R15),C''''        IF STRING ENDS WITH A QUOTE
         BNE   NOENDQ
         BCTR  R0,0                REDUCE LENGTH FOR TRAILING QUOTE
         LTR   R0,R0
         BZ    NULL
NOENDQ   EQU   *
*        CHANGE ALL '' TO '
         BAL   R14,SQUEEZE
         LTR   R0,R0
         BZ    NULL
         BAL   R14,PUTLINE
         B     EXIT0
         SPACE
SQUEEZE  LR    R4,R14
         C     R0,=F'256'          IF TOO LONG FOR OBUF AND MYSEG1
         BNH   *+8                   THEN
         L     R0,=F'256'            TRUNCATE TEXT
         LA    R15,OBUF
         LR    R14,R1
         AR    R14,R0              POINT PAST LAST CHAR
SQ1      CR    R1,R14
         BE    SQX
SQ2      MVC   0(1,R15),0(R1)      COPY 1 BYTE
         LA    R15,1(,R15)
         CLI   0(R1),C''''         IF WE COPIED A QUOTE
         BE    SQ4                   GO TO SQ4
SQ3      LA    R1,1(,R1)
         B     SQ1
SQ4      LA    R1,1(,R1)           POINT TO CHAR AFTER 1ST QUOTE
         CR    R1,R14              IF END OF STRING FOLLOWS 1ST QUOTE
         BE    SQX                   DONE
         CLI   0(R1),C''''         IF SECOND QUOTE
         BE    SQ3                   IGNORE IT
         B     SQ2
SQX      LA    R1,OBUF
         LR    R0,R15              POINT TO BYTE AFTER LAST BYTE COPIED
         SR    R0,R1               COMPUTE LENGTH
         LR    R14,R4
         BR    R14
         SPACE
TOHEX1   MVC   1(1,R15),0(R1)
         UNPK  0(3,R15),1(2,R15)
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)
         LA    R1,1(,R1)
         BCT   R0,TOHEX1
         MVI   0(R15),C' '
         BR    R14
         SPACE
         AGO   .SKIP1
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
.SKIP1   ANOP
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTLINS
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        TERMINATE                                         *
*                                                          *
************************************************************
         SPACE
EXIT0    MVI   RETCODE+1,0
CLEANUP  EQU   *
         CLI   RETCODE+1,0         IS RETCODE ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         SPACE
         LH    R2,RETCODE
         SPACE
EXIT     LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         AGO   .SKIP2
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
.SKIP2   ANOP
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
         DC    0D'0'               END OF CSECT
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA24  DSECT
         DS    18F                 REGISTER SAVEAREA
LINKAREA DS    2F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                  ADDRESS OF IKJPUTL
MYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE
RETCODE  DS    H
DEBUG    DS    C
OBUF     DS    0D,256C
         DS    0D
@DATA24L EQU   *-@DATA24
         SPACE
         PRINT NOGEN
         IKJCPPL
         SPACE
         IKJPPL
         SPACE
         IKJUPT
         SPACE
         IKJIOPL
         SPACE
*        IKJPSCB
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
