LOGIT is a package written in REXX that is intended to be called
by CLIST or REXX programs to log information.

The members of this library are:

LOGIT    This is the routine that will add records to a log data set.
LOGITCPY This routine will copy, and optionally clear out, the log data set.
SAMPLJOB A sample batch tmp calling Logit.
SXMITLOG A sample exec to copy and clear a log. This exec will copy
         the log, using LOGITCPY, to a new hlq appeneding the julian
         data to the copy data set for uniqueness. It will then clear
         the log and e-mail the copy using xmitip.

To install this package copy the members LOGIT and LOGITCPY into a
library where they can be accessed by the calling applications.

The log data set allocation recommendation is:
     RECFM=VB LRECL=255 BLKSIZE=27998

The primary space allocation should be large enough so that it will
contain all the log messages that you anticipate to be generated
between now and the time you copy and clear it. It should have
a secondary space allocation as a precaution.

It is recommended that the allocation units be in BLOCKS as the
routine will not write any data if there is no calculated free
space in the data set. The calculation is performed by subtracting
the used space from the allocated space (as determined from the
listdsi function).

   ** as a precaution to avoid an x37 abend in any production job
   ** a minimum of 2 free space units (blocks or tracks) is required

The log data set *must* be defined to your security system so that it
can be written to by anyone.

      e.g. ADDSD 'log-dsname' UACC(UPDATE)

IMPORTANT NOTE: Do *NOT* browse the log data set online as that will
                prevent logging from occuring. Use the LOGITCPY to
                make a copy to review.

Each routine has documentation in the comments at the beginning of the
code so you should review that.

The basic logic used for LOGIT is:

   1. Process the input options of log data set name and message text.
   2. If the log data set does not exist then tell someone and exit.
   3. Test for free space
      a. If zero then exit
   4. Attempt to allocate the log data set using DISP=MOD
      a. if successful write out the message text with header
      b. if not successful then call the SLEEP routine to sleep
         for 1 second and then retry the allocation 10 times
      ** Note that the sleep time and retry count are customizable.
   5. Free the log data set allocation and exit

The basic logic used for LOGITCPY is:

   1. Process the input options of log data set name, copy log data set
      name, and optional clear option.
   2. If the log data set does not exist then tell someone and exit.
   3. If the copy log data set exists then tell someone and exit.
      (the copy data set will be allocated by LOGITCPY)
   4. Attempt to allocate the log data set using DISP=SHR
      a. if successful then read in all the log data set records
      b. if not successful then call the SLEEP routine to sleep
         for 1 second and then retry the allocation 10 times
      ** Note that the sleep time and retry count are customizable.
   5. If the clear option is specified then write out a single
      record indicating the log has been cleared.
   6. Free the log data set.
   6. Allocate and write out the copy log data set, free it and exit.

Comments, suggestions, and complaints should be directed to the author
at:

  Lionel B. Dyck
  Kaiser Permanente Information Technology
  25 N. Via Monte Ave.
  Walnut Creek, CA 94598
  (925) 926-5332
  Internet: lionel.b.dyck@kp.org
