/**  REXX -- CREATE ANOTHER VERSION OF A D/S UNDER ISPF 3.4  **/
/* FROM CBTTAPE FILE 357 */
/* ----------------------------------------------------------- *
 * UPDATE 06/01/2016 TO SUPPORT PDSE DATASETS WITH GENERATIONS *
 *                                                             *
 * NOTE: AT THIS POINT IN TIME THERE IS NO WAY TO COPY THE     *
 *       GENERATIONS                                           *
 *                                                             *
 * BY LIONEL B. DYCK                                           *
 * ----------------------------------------------------------- */

/* ------------- Start of Doc--------------------------------- *
 CLONE  NEWDSN  ( # | +# | -# )  ( EMPTY )  ( RELEASE ) ( Q# )

       creates a new data set with the same attributes as the one
       overtyped. Sequential, partitioned data sets extended
       (PDSE's) or partitioned data sets (PDS's) may be
       duplicated. NEWDSN may be fully qualified with quotes,
       e.g.  'SYS4.MACLIB', or allowed to take on the user
       prefix, e.g. TEST.DATA. Please note you must have
       sufficient access authority to create a dataset under
       whatever security system is in use.

       The original name may be used as a prefix by typing an
       equal sign (=) followed by the intended suffix in place of
       NEWDSN.  Overtyping SYS4.MACLIB with =.BKUP will produce a
       new data set named SYS4.MACLIB.BKUP; the new data set name
       must not exist and should be a legitimate name for the
       invoking user to create.

       The original data set may be used as a suffix by typing
       the intended prefix followed by an equal sign (=).
+                          ___________
       Overtyping SYS4.MACLIB with YOURUID.= will create a new
       data set named YOURID.SYS4.MACLIB.

       Using either the above mentioned prefixing or suffixing
       options will always cause the resultant new data set name
       to be fully qualified, i.e. as if it were input within
       quotes. Use a blank following the new data set choice if
       there is any doubt about how it will be "seen" by the
       system.

       An option of Q# will reduce the initial qualifiers of the
       original data set by # for prefixed XXX= or the final
       qualifiers for suffixed =XXX new data set names.  Given
       the preceding example, a Q1 will cause YOURUID.MACLIB to
       be created.

       Optionally, EMPTY may be specified with the new name to
       not cause data to be copied.

       Optionally, RELEASE may be specified to release unused
       space following copying data (useful for back up
       versions).

       You may also specify a change to directory blocks; for
       partitioned data sets only, a new number or an
       increment/decrement may be specified (no sign means
       replace, a '+' causes that number to be added and a '-' to
       be subtracted).  The new number may not be below the
       currently used directory size when causing data to be
       copied.

       So, if SYS1.MACLIB is the data set shown in the data set
       list, entering the command over ot of

          CLONE  +17  RUBBER.DUCKY  EMPTY

       will create a new PDS under your ID (assuming your prefix
       is the default) with the name RUBBER.DUCKY with no members
       and with 17 more directory blocks then the original.

       For sequential data sets, specifying a number or a number
       prefixed by a plus(+) or minus(-) will cause a change to
       the logical record length. An unsigned number will cause
       the resultant data set to have that number as its LRECL. A
       plus value, +#, will cause # to be added to the LRECL; a
       minus value, -#, will cause that # to be subtracted from
       the LRECL. If the new record length is greater then the
       old, blanks will be used to pad on the right. Variable
       lengths are the LRECL, so for a maximum 1,000 bytes of
       data, specify 1004.

       If the following were overtyped on SYS1.MACLIB

          CLONE  'SYS2.MACLIB'

       a new PDS named SYS2.MACLIB would be created and all the
       SYS1.MACLIB members copied to it.

       Entering

          CLONE  +90  =X

       on SYS1.MACLIB, a new PDS named SYS1.MACLIBX would be
       created with 90 more directory blocks then the current
       allocation of SYS1.MACLIB and all the SYS1.MACLIB members
       copied to it.

       Entering an equal sign on subsequent data set lines under
       DS List would cause the same command to be executed
       against them. This is useful if you want to create back up

 * ------------- End of Doc ---------------------------------- */

   PARSE ARG PARMS
   MSG = MSG(OFF)
   PARMS = TRANSLATE(PARMS)

   ZINPDSN = ""
   ZNEWDSN = ""
   OPTION  = ""
   NUMOPT  = ""
   NUMCHG  = ""
   RELOPT  = ""
   Q       = 0

   IF WORD(PARMS,2) = "" | WORD(PARMS,1) = "?"
      THEN SIGNAL DISPDOC

   DO II = 1 TO 9
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF TOKEN = "EMPTY" THEN OPTION = TOKEN
      ELSE IF TOKEN = "RELEASE" THEN RELOPT = "RELEASE"
      ELSE IF SUBSTR(TOKEN,1,1) = "+" | SUBSTR(TOKEN,1,1) = "-"
         THEN DO
            NUMOPT = "CHG"
            NUMCHG = TOKEN
         END
      ELSE IF DATATYPE(TOKEN,'W')
         THEN DO
            NUMOPT = "NEW"
            NUMCHG = TOKEN
         END
      ELSE IF SUBSTR(TOKEN,1,1) = "=",
            | SUBSTR(TOKEN,LENGTH(TOKEN),1) = "="
         THEN ZNEWDSN = TOKEN
      ELSE IF SUBSTR(TOKEN,1,1) = "Q" & DATATYPE(SUBSTR(TOKEN,2),'W')
         THEN Q = SUBSTR(TOKEN,2)
      ELSE DO
         IF ZNEWDSN = "" THEN ZNEWDSN = TOKEN
                         ELSE ZINPDSN = TOKEN
      END
   END II

   IF SUBSTR(ZNEWDSN,1,1) = "=" THEN DO
      IF Q = 0 THEN ZNEWDSN = SUBSTR(ZINPDSN,1,LENGTH(ZINPDSN)-1),
         || SUBSTR(ZNEWDSN,2) || "'"
      ELSE DO
         NN = LENGTH(ZINPDSN) - 1
         DO PP = 1 TO Q
            DO II = NN TO 1 BY -1 WHILE(SUBSTR(ZINPDSN,II,1) <> ".")
            END II
            NN = II - 1
         END PP
         ZNEWDSN = SUBSTR(ZINPDSN,1,NN) || SUBSTR(ZNEWDSN,2) || "'"
      END
   END
   ELSE IF SUBSTR(ZNEWDSN,LENGTH(ZNEWDSN),1) = "=" THEN DO
      IF Q = 0 THEN ZNEWDSN = "'",
         || SUBSTR(ZNEWDSN,1,LENGTH(ZNEWDSN)-1) || SUBSTR(ZINPDSN,2)
      ELSE DO
         NN = 2
         DO PP = 1 TO Q
            DO II = NN TO LENGTH(ZINPDSN)-1,
                  WHILE(SUBSTR(ZINPDSN,II,1) <> ".")
            END II
            NN = II + 1
         END PP
         ZNEWDSN = "'" || SUBSTR(ZNEWDSN,1,LENGTH(ZNEWDSN)-1),
            || SUBSTR(ZINPDSN,NN,LENGTH(ZINPDSN)-NN+1)
      END
   END

   IF LENGTH(ZNEWDSN) > 46 THEN DO
      SAY "***> NEW DATA SET NAME TOO LONG ("ZNEWDSN")"
      EXIT(1)
   END
   IF SYSDSN(ZNEWDSN) = "OK" THEN DO
      SAY "***> NEW DATA SET ALREADY EXISTS"
      EXIT(1)
   END

   IF OPTION <> "EMPTY" THEN DO
      ADDRESS TSO
      "FREE  DD(SORTIN SORTOUT SYSPRINT SYSIN SORTLIST)"
      LDSI = LISTDSI(ZINPDSN DIRECTORY)
      "ALLOC DD(SORTIN) DSN("ZINPDSN") SHR"
      "ALLOC DD(SYSPRINT) DUMMY"

      IF SYSDSORG = PO THEN DO
         IF SYSADIRBLK = "NO_LIM" THEN DO
            ADDRESS ISPEXEC 'DSINFO DATASET('ZINPDSN')'
            IF ZDSNGEN > 0 THEN DO
               MAXGEN = 'MAXGENS('STRIP(ZDSNGEN)')'
               LIB    = 'LIBRARY,2'
               END
            ELSE DO
                 LIB = 'LIBRARY'
                 MAXGEN = ''
                 END
            "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
               "DSNTYPE("LIB") DD(SORTOUT) UNIT(SYSDA)" MAXGEN
            IF RC <> 0 THEN DO
               SAY "***> ALLOCATION FAILED W/ RC =" RC
               SAY "***> UNABLE TO CREATE" ZNEWDSN
               EXIT(1)
            END
         END
         ELSE DO
            IF NUMOPT = "" THEN DO
               "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
                  "DIR("SYSADIRBLK") DD(SORTOUT) UNIT(SYSDA)"
               IF RC <> 0 THEN DO
                  SAY "***> ALLOCATION FAILED W/ RC =" RC
                  SAY "***> UNABLE TO CREATE" ZNEWDSN
                  EXIT(1)
               END
            END
            ELSE DO
               IF NUMOPT = "NEW" THEN DIRCNT = NUMCHG
               ELSE DIRCNT = SYSADIRBLK + NUMCHG
               IF DIRCNT < SYSUDIRBLK THEN DO
                  SAY "***> NEW NUMBER OF DIRECTORY BLOCKS ("DIRCNT")",
                     "MAY NOT"
                  SAY "***> BE LESS THEN THE NUMBER CURRENTLY IN USE",
                     "("SYSUDIRBLK")"
                  EXIT(1)
               END
               "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
                  "DIR("DIRCNT") DD(SORTOUT) UNIT(SYSDA)"
               IF RC <> 0 THEN DO
                  SAY "***> ALLOCATION FAILED W/ RC =" RC
                  SAY "***> UNABLE TO CREATE" ZNEWDSN
                  EXIT(1)
               END
            END
         END
         "ALLOC DD(SYSIN) NEW TRACKS SPACE(1) UNIT(SYSDA)",
              " LRECL(80) BLKSIZE(800) RECFM(F B)"
         QUEUE " COPY INDD=SORTIN,OUTDD=SORTOUT"
         "EXECIO" QUEUED() "DISKW SYSIN (FINIS"
         "CALL *(IEBCOPY)"
      END
      ELSE IF SYSDSORG = "PS" | SYSDSORG = "PS-E" THEN DO
         "ALLOC DD(SORTLIST) DUMMY"
         IF NUMOPT = "" THEN DO
            "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN") DD(SORTOUT)",
               "UNIT(SYSDA)" RELOPT
            IF RC <> 0 THEN DO
               SAY "***> ALLOCATION FAILED W/ RC =" RC
               SAY "***> UNABLE TO CREATE" ZNEWDSN
               EXIT(1)
            END
            "ALLOC DD(SYSIN) NEW TRACKS SPACE(1) UNIT(SYSDA)",
                 "LRECL(80) BLKSIZE(800) RECFM(F B)"
            QUEUE " SORT FIELDS=COPY"
            "EXECIO" QUEUED() "DISKW SYSIN (FINIS"
            "CALL *(SORT)"
            IF RC <> 0 THEN DO
               SAY "***> COPY OF DATA FAILED W/ RC =" RC
               SAY "***> " ZNEWDSN " BUT EMPTY..."
               EXIT(1)
            END
         END
         ELSE DO
            LDSI = LISTDSI(ZINPDSN)
            IF NUMOPT = "NEW" THEN NEWLRECL = NUMCHG
            ELSE NEWLRECL = SYSLRECL + NUMCHG
            IF SYSRECFM = "VB"
               THEN NEWBLKSIZE = SYSBLKSIZE
               ELSE NEWBLKSIZE = NEWLRECL * (27998%NEWLRECL)
            "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN") DD(SORTOUT)",
               "UNIT(SYSDA)" RELOPT,
               "LRECL("NEWLRECL") BLKSIZE("NEWBLKSIZE")"
            IF RC <> 0 THEN DO
               SAY "***> ALLOCATION FAILED W/ RC =" RC
               SAY "***> UNABLE TO CREATE" ZNEWDSN
               EXIT(1)
            END
            "ALLOC DD(SYSIN) NEW TRACKS SPACE(1) UNIT(SYSDA)",
                 "LRECL(80) BLKSIZE(800) RECFM(F B)"
            QUEUE " SORT FIELDS=COPY "
            IF NEWLRECL > SYSLRECL & INDEX(SYSRECFM,'F') <> 0 THEN DO
               PAD = NEWLRECL - SYSLRECL
               OUTREC_STR = " OUTREC FIELDS=(1," || SYSLRECL,
                  || "," || PAD || "X)"
               QUEUE OUTREC_STR
            END
            "EXECIO" QUEUED() "DISKW SYSIN (FINIS"
            "CALL *(SORT)"
            IF RC <> 0 THEN DO
               SAY "***> COPY OF DATA FAILED W/ RC =" RC
               SAY "***> " ZNEWDSN " BUT EMPTY..."
               EXIT(1)
            END
         END
      END
      "FREE  DD(SORTIN SORTOUT SYSPRINT SYSIN SORTLIST)"
      "ALLOC DD(SYSPRINT) DSN(*)"
      "ALLOC DD(SYSIN) DSN(*)"
   END
   ELSE DO
      ADDRESS TSO
      LDSI = LISTDSI(ZINPDSN DIRECTORY)
      IF SYSDSORG = PO THEN DO
         IF SYSADIRBLK = "NO_LIM" THEN DO
            ADDRESS ISPEXEC 'DSINFO DATASET('ZINPDSN')'
            IF ZDSNGEN > 0 THEN DO
               MAXGEN = 'MAXGENS('STRIP(ZDSNGEN)')'
               LIB    = 'LIBRARY,2'
               END
            ELSE DO
                 LIB = 'LIBRARY'
                 MAXGEN = ''
                 END
            "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
               "DSNTYPE("LIB") DD(SORTOUT) UNIT(SYSDA)" MAXGEN
            IF RC <> 0 THEN DO
               SAY "***> ALLOCATION FAILED W/ RC =" RC
               SAY "***> UNABLE TO CREATE" ZNEWDSN
               EXIT(1)
            END
         END
         ELSE DO
            IF NUMOPT = "" THEN DO
               "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
                  "DIR("SYSADIRBLK") UNIT(SYSDA)"
               IF RC <> 0 THEN DO
                  SAY "***> ALLOCATION FAILED W/ RC =" RC
                  SAY "***> UNABLE TO CREATE" ZNEWDSN
                  EXIT(1)
               END
            END
            ELSE DO
               IF NUMOPT = "NEW" THEN DIRCNT = NUMCHG
               ELSE DIRCNT = SYSADIRBLK + NUMCHG
               "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN")" RELOPT,
                  "DIR("DIRCNT") DD(SORTOUT) UNIT(SYSDA)"
               IF RC <> 0 THEN DO
                  SAY "***> ALLOCATION FAILED W/ RC =" RC
                  SAY "***> UNABLE TO CREATE" ZNEWDSN
                  EXIT(1)
               END
            END
         END
      END
      ELSE IF SYSDSORG = "PS" | SYSDSORG = "PS-E" THEN DO
         "ALLOC DSN("ZNEWDSN") NEW LIKE("ZINPDSN") UNIT(SYSDA)"
         IF RC <> 0 THEN DO
            SAY "***> ALLOCATION FAILED W/ RC =" RC
            SAY "***> UNABLE TO CREATE" ZNEWDSN
            EXIT(1)
         END
      END
   "FREE  DSN("ZNEWDSN")"
   END

   IF OPTION = "EMPTY"
      THEN SAY ZINPDSN "CLONED TO" ZNEWDSN "WITHOUT COPYING DATA"
      ELSE SAY ZINPDSN "COPIED TO" ZNEWDSN
   EXIT(0)

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "                                                             "
   SAY "  CLONE         MAKES A COPY OF A DATA SET UNDER ISPF 3.4    "
   SAY "                SIMILAR TO THE ONE POINTED TO EITHER         "
   SAY "                COPYING THE DATA OR NOT. SIMPLY TYPE 'CLONE' "
   SAY "                FOLLOWED BY THE NEW NAME AND, OPTIONALLY,    "
   SAY "                THE KEYWORD 'EMPTY' AND/OR DIRECTORY COUNT   "
   SAY "                AND/OR THE 'RELEASE' KEYWORD. EXITS IF NEW   "
   SAY "                DATA SET EXISTS (SEE CLONER).                "
   SAY "                                                             "
   SAY "  SYNTAX:  CLONE  NEW-DATASET-NAME                           "
   SAY "                      <EMPTY>  <#>  <RELEASE>  <Q#>          "
   SAY
   SAY "             NEW-DATASET-NAME   IS THE NAME OF THE DATA SET  "
   SAY "                TO BE CREATED. IT MAY BE QUALIFIED (WITH     "
   SAY "                QUOTES) OR UNQUALIFIED (ASSUMES YOUR USER-   "
   SAY "                ID AT THE FRONT). IT MAY ALSO BE OF THE FORM "
   SAY "                =XXX WHERE XXX IS SUFFIXED TO THE ORIGINAL   "
   SAY "                NAME OR OF THE FORM XXX= WHERE XXX IS        "
   SAY "                PREFIXED TO THE ORIGINAL NAME. THE Q# OPTION "
   SAY "                MAY BE USED TO REMOVE # LEVELS OF QUALIFIERS "
   SAY "                AT THE BACK OR FRONT OF THE ORIGINAL NAME.   "
   SAY
   SAY "            <EMPTY>  IS AN OPTIONAL PARAMETER TO INDICATE    "
   SAY "                NO DATA IS TO BE COPIED FROM THE ORIGINAL    "
   SAY "                FILE.                                        "
   SAY
   SAY "            <#> IS AN OPTIONAL CHANGE TO THE NUMBER OF       "
   SAY "                DIRECTORY BLOCKS IF THE DATA SET IS A PDS.   "
   SAY "                A WHOLE NUMBER IS USED AS IS; PREFIXED BY A +"
   SAY "                IS ADDED; BY A - IS SUBTRACTED. NEVER ALLOWS "
   SAY "                BELOW USED BLOCKS. IF THE DATA SET IS        "
   SAY "                SEQUENTIAL, THE NUMBER BECOMES THE LRECL; A +"
   SAY "                PREFIX ADDS BYTES; A - PREFIX SUBTRACTS.     "
   SAY
   SAY "            <RELEASE> IS AN OPTION THAT WILL RELEASE ANY     "
   SAY "                UNUSED SPACE IN THE RESULTANT FILE           "
   SAY
   SAY "            <Q#> IS AN OPTION TO REMOVE THAT MANY (#) LEVEL  "
   SAY "                QUALIFIERS OF THE ORIGINAL DATA SET EITHER   "
   SAY "                PREFIXING IT WITH THE XXX FROM THE XXX= INPUT"
   SAY "                OR SUFFIXING IT WITH THE XXX FROM THE =XXX.  "
   SAY
   EXIT(1)

