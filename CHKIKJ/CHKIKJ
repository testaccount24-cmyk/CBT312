/* --------------------  rexx procedure  -------------------- */
 ver = '1.4'
/* Name:      chkikj                                          |
 |                                                            |
 | Function:  ispf dialog to compare the ibm provided         |
 |            sys1.samplib(ikjtso00) to the active            |
 |            ikjtsoxx                                        |
 |                                                            |
 | Syntax:    %chkikj                                         |
 |                                                            |
 | Usage Notes: 1. Dynamically load ISPF Panel (end of        |
 |                 this code)                                 |
 |              2. Will display an ISPF panel to:             |
 |                 - verify/update ibm samplib ikjtso00       |
 |              3. Then invoke TSO PARMLIB command and        |
 |                 capture results                            |
 |              4. If a report dataset name is specified      |
 |                 on the panel then the report will be       |
 |                 written to it and then Viewed.             |
 |                 Otherwise STEMEDIT will be called to       |
 |                 View the report.                           |
 |                                                            |
 | Dependencies: 1. STEMEDIT (CBT File 183)                   |
 |               2. Find >DATA and maintain list of           |
 |                  descriptions                              |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |     v1.4   06/15/17 - Add EDIT commands to find differences|
 |                     - Change alloc: ... blksize(0) reu ... |
 |                     - Change alloc: ... blksize(0) ISPF dsn|
 |                     - bug fix if no entry for ptype found  |
 |                     - bug fix in sort routine if string='' |
 |     v1.3   02/16/17 - Add descriptions                     |
 |     v1.2   02/16/17 - Fix sort and fix missing PLATPGM     |
 |     v1.1   02/15/17 - Clean up report                      |
 |     v1.0   02/15/17 - Enhancements per BK                  |
 |            10/17/16 - Many improvements                    |
 |            10/14/16 - Moved panel inline and use the       |
 |                       loadispf routine to load it.         |
 |                     - Generate a report showing all        |
 |                       commands and where found.            |
 |            10/13/16 - Change from Console command to       |
 |                       use Parmlib command                  |
 |            10/13/16 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */

 parse value '' with null type types ibm. site.

/* --------------------------------------------- *
 | Get into ISPExec mode and load the ISPF Panel |
 * --------------------------------------------- */
 Address ISPExec
 load_info = loadispf()
 'vget (ibmsamp ikjrpt) profile'

/* ---------------------- *
 | Display the ISPF Panel |
 * ---------------------- */
 'Display Panel(chkikjp)'
 if rc > 0 then do until length(load_info) = 0
    parse value load_info with dd libd load_info
    "libdef" libd
    address tso "free f("dd")"
    exit
    end

/* -------------------------------------- *
 | Fixup the report dataset name if blank |
 * -------------------------------------- */
 if ikjrpt = null then do
    if sysvar('syspref') = null ,
       then do
            hlq = sysvar('sysuid')
            end
       else do
            hlq = sysvar('syspref')
            end
       lpar = mvsvar('sysname')
       ikjrpt = "'"hlq".IKJTSO."lpar".COMPARE'"
    end
 'vput (ibmsamp ikjrpt) profile'

/* ------------------------------------------------------ *
 | Process the >DATA section to get the descriptions that |
 | will be used for the report.                           |
 * ------------------------------------------------------ */
 desc. = null
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">DATA " then leave
    parse value line with data '/*' desc '*/' .
    do id = 1 to words(data)
       iw = word(data,id)
       desc.iw = strip(desc)
       end
    end

 Address TSO
/* --------------------------------- *
 | Issue PARMLIB command and trap it |
 * --------------------------------- */
 call outtrap 't.'
 'parmlib LIST(ALL)'
 call outtrap 'off'

/* ----------------------------------- *
 | Process the Console Command results |
 * ----------------------------------- */
 hit = 0
 ptypes = 'PLATCMD PLATPGM AUTHCMD AUTHPGM AUTHTSF NOTBKGND'
 do i = 1 to t.0
    select
      when ( pos('CURRENT PARMLIB SETTINGS FOR',t.i) > 0 ) ,
        then do
                parse value t.i with x1 x2 x3 x4 type':' .
                if wordpos(type,ptypes) > 0 then hit = 1
                                            else hit = 0
                if hit = 0 then iterate
                if wordpos(type,types) = 0 then
                   types = strip(types) type
                iterate
             end
      when ( pos('THERE ARE NO ',t.i) > 0 ) ,
        then do
                parse value t.i with . . . type .
                types = strip(types) type
                hit = 0
             end
      otherwise nop
    end /* end select */
    if hit = 1 then site.type = strip(site.type) strip(t.i)
 end

/* ------------------------------- *
 | Read in the IBM Sample IKJTSO00 |
 * ------------------------------- */
 ddn = 'IBMS'random(999)
 'Alloc f('ddn') shr reuse ds('ibmsamp')'
 'Execio * diskr' ddn '(finis stem samp.'
 'Free f('ddn')'

/* ---------------------------------- *
 | Process the IBM Sample into a stem |
 * ---------------------------------- */
 hit = 0
 do i = 1 to samp.0
    parse value samp.i with data '/*' comment .
    if strip(data) = null then iterate
    if hit = 1 then
       if pos(')',data) > 0 then do
          hit = 0
          parse value data with data')'
          if strip(data) = null then iterate
          ibm.type = strip(ibm.type) strip(data)
          end
    if pos('NAMES(',data) > 0 then do
       hit = 1
       type = word(data,1)
       if wordpos(type,types) = 0 then
          types = strip(types) type
       parse value data with 'NAMES('data
       end
    if hit = 1 then ibm.type = strip(ibm.type) strip(data)
    end

/* ---------------------------- *
 | Now report in tabular format |
 * ---------------------------- */
 do i = 1 to words(types)
    type = word(types,i)
    commands.type = null
    do iw = 1 to words(ibm.type)
       w = word(ibm.type,iw)
       commands.type = commands.type w
       end
    do iw = 1 to words(site.type)
       w = word(site.type,iw)
       if wordpos(w,commands.type) = 0 then
          commands.type = commands.type w
       end
    end

/* ---------------- *
 | Sort the strings |
 * ---------------- */
 types = sort(types)
 do i = 1 to words(types)
    type = word(types,i)
    commands.type = sort(commands.type)
    end

 address ispexec "vget (zdel)"
 _ecmd_ = "x all"zdel" f 1 8 all '------('"zdel
 c = 0
 c=c+1
 summ.c = 'Report comparing IBM SAMPLIB IKJTSO00 to Site IKJTSOxx - Ver:' ver
 c=c+1
 summ.c = center('Sysplex:' mvsvar('sysplex') 'Lpar:' mvsvar('sysname'),57)
 c=c+1
 summ.c = center(date() time(),57)
 c=c+1
 summ.c=""copies("-",68)
 c=c+1
 summ.c="   Find all differences with these EDIT commands:"
 c=c+1
 summ.c="   - IBM:    "_ecmd_" f all 13 22 'X         '"
 c=c+1
 summ.c="   - site:   "_ecmd_" f all 13 22 '         X'"
 c=c+1
 summ.c=""copies("-",68)

 wt = words(types)
 do i = 1 to wt
    type = word(types,i)
    c = c + 1
    summ.c = ' '
    c = c + 1
    summ.c = '------(' type ')------'
    c = c + 1
    summ.c = ' '
    c = c + 1
    summ.c = left('Module',10) left('IBM',7) left('Site',10) ,
             left('Description',30)
    c = c + 1
    summ.c = left('--------',10) left('---',7,) left('----',10) left('-',30,'-')
    wct = words(commands.type)
    do iw = 1 to wct
       cmd = word(commands.type,iw)
       if wordpos(cmd,ibm.type) > 0 then ibmf = 'X'
                                  else ibmf = ' '
       if wordpos(cmd,site.type) > 0 then sitef = 'X'
                                   else sitef = ' '
       c = c + 1
       summ.c = left(cmd,11) left(ibmf,8) left(sitef,8) desc.cmd
       end
    end
    summ.0 = c

/* ------------------------------------------------------------- *
 | If ikjrpt (optional report dataset) is null then use          |
 | stemedit to view the report.                                  |
 |                                                               |
 | Otherwise write out to a report dataset, after allocating it, |
 | and then view it.                                             |
 * ------------------------------------------------------------- */
 if ikjrpt = 'TSO' then do
    title = 'Report comparing IBM SAMPLIB IKJTSO00 to Site IKJTSOxx'
    CALL stemview 'view','summ.',,,title,,80
    end
 else do
      call outtrap 'x.'
      'Delete' ikjrpt
      call outtrap 'off'
      tdd = 'IKJRPT'random(99)
      'Alloc f('tdd') ds('ikjrpt') new spa(1,1) tr recfm(f b)' ,
            'lrecl(80) blksize(0) reuse'
      'Execio * diskw' tdd '(finis stem summ.'
      'Free f('tdd')'
      Address ISPExec 'Edit Dataset('ikjrpt')'
      end

/* -------------- *
 | Exit this code |
 * -------------- */
 Exit

/* ------------ *
 | Sort routine |
 * ------------ */
 Sort: Procedure
 parse arg string
 null = ''
 if strip(string) = null then return null
 do i = 1 to words(string)
    stem.i = word(string,i)
    end
 stem.0 = words(string)
/* rexx command to sort a stem variable
   Simple bubble sort of "stem' by stem.1
   Ken Singer, Shell Oil, Houston
 ********************************************************/
  if stem.0 = 1 then return /* simple sort !*/
  ctr =  stem.0
  do y = 1 to  ctr - 1
     do x = y+1 to ctr
        if stem.x = null then leave
        if stem.x < stem.y then do
            /* swap these 2 entries */
            t1 = stem.y ;
            stem.y = stem.x
            stem.x = t1
        end
     end x
  end y
  string = null
  do i = 1 to stem.0
     string = strip(string) stem.i
     end
 drop stem.
 return string

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * Allocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(0)"
 return

/* ---------------------------------------------- *
 | Here is the location of the inline ISPF panels |
 | that will be dynamically loaded and activated  |
 | using LIBDEF.                                  |
 * ---------------------------------------------- */
>START - start of inline data
>PANEL CHKIKJP
)Attr Default(%+_)
/* + type(text  ) intens(low )                   information only  */
   $ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
   @ type(text) intens(high) color(blue ) hilite(reverse)
)Body expand(\\)
%-\-\-@Compare IKJTSOxx to IBM Sample%-\-\-
%Command ===>_zcmd
+
+IBM SAMPLIB Dataset:$ibmsamp                                       +
+
+Report Dataset     :$ikjrpt                                        +
+                    TSO to view in temporary dataset
+
+NOTE: You must have the authority to issue the TSO PARMLIB command
+      to use this dialog.
+
+Press Enter to continue or PF3 to cancel
)Init
 .cursor = ibmsamp
 .help   = #chkikj
 if (&ibmsamp = &Z)
     &ibmsamp = '''sys1.samplib(ikjtso00)'''
)Proc
  ver (&ibmsamp,dsnamepq)
  ver (&ikjrpt,dsnamepq)
)End
>PANEL #CHKIKJ
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+-\-\-(%CHKIKJ - IKJTSO Comparison+)-\-\-%Tutorial
%Command ===>_ZCMD
+
+CHKIKJ is a ISPF application that will compare the active IKJTSOxx settings
+to the IBM Samplib IKJTSO00. This helps to highlight changes that IBM has
+made which may not be reflected in the production IKJTSOxx.
+
+The production IKJTSOxx settings are found using the TSO PARMLIB command,
+which means the individual using this application must have authorization to
+use the PARMLIB command.
+
+If the report name is blank then it will default to userid.IKJTSO.lpar.COMPARE
+or it may be specified using standard ISPF dataset naming conventions. If it
+is TSO then the STEMEDIT REXX function (CBT Tape file 183) will be used.
+
+On the Panel point to the IBM SAMPLIB IKJTSO00 - e.g. SYS1.SAMPLIB(IKJTSO00)
+and either blank out the report dataset name, change it, or use it.
+
+When ready to execute press Enter or PF3 to cancel.
)PROC
)END
>END   - end of all inline data (optional if last)

/* ------------------------------------------------ *
 | What follows after the >DATA are the load module |
 | descriptions that will be used in the report.    |
 |                                                  |
 | The format is:                                   |
 |                                                  |
 | 1-8    Load module name                          |
 | 9-n    Description (limited to 30 chars)         |
 |        enclosed between /* and */                |
 * ------------------------------------------------ */
>DATA
 ACLSERV              /* ACL FOR OS/390 */
 AD ADDSD             /* RACF PROTECT NEW DATASET */
 ADRDSSU              /* IBM DFDSS Backup/Restore */
 ADYOPCMD             /* DAE/IPCS SEE APAR OW14720 */
 AESCNETS             /* AES/TCP MONITORING */
 AEST049              /* AES/TCP MONITORING */
 AG ADDGROUP          /* RACF DEFINE GROUP PROFILE */
 ALD ALTDSD           /* RACF ALTER DATASET PROFILE */
 ALG ALTGROUP         /* RACF ALTER GROUP */
 ALLOCATE ALLOC       /* TSO ALLOCATE DATASET */
 ALTER                /* IDCAMS ALTER COMMAND */
 ALTLIB IKJADLIB      /* TSO ALTERNATE CLIST/EXEC LIB */
 ALU ALTUSER          /* RACF ALTER USER PROFILE */
 AMASPZAP             /* MVS BASE */
 AOPCMND              /* IBM IP PRINTWAY START/STOP PRINTER */
 ARMAUTH              /* BMC RECOVER MGR */
 ATTRIB ATTR          /* TSO ATTRIBUTE COMMAND */
 AU ADDUSER           /* RACF ADD USER */
 BBSDTCPA             /* BMC SOFTWARE, INC */
 BINDDATA BDATA       /* MANAGE CACHE DEVICES */
 BLKUPD               /* RACF MODIFY BLOCKS */
 BUDDSN               /* STORAGE GUARD / BUDGET DASD*/
 BUDGET               /* STORAGE GUARD / BUDGET DASD*/
 CADU4804             /* CA-DOCVIEW/VPE */
 CADU4805             /* CA-DOCVIEW/VPE */
 CAE$BQRY             /* CA-COMMON SERVICES */
 CALL IKJEFG00        /* TSO CALL A PROGRAM */
 CAS9UDTN             /* CA-ENF */
 CAZ2CTSO             /* CA-JCLCHECKER */
 CDELPAIR             /* PPRC TSO CMDS */
 CDELPATH             /* PPRC TSO CMDS */
 CESTPAIR             /* PPRC TSO CMDS */
 CESTPATH             /* PPRC TSO CMDS */
 CGROUP               /* PPRC TSO CMDS */
 CO CONNECT           /* RACF CONNECT TO GROUP */
 COFDMON              /* HIPERBATCH MONITOR */
 CONSOLE              /* MVS CONSOLE COMMAND */
 CONSPROF             /* TSO CONSOLE PROFILE */
 COSRCALR             /* BMC SOFTWARE, INC */
 CQUERY               /* PPRC TSO CMDS */
 CRECOVER             /* PPRC TSO CMDS */
 CSFDAUTH             /* ICSF CRYPTO IBM */
 CSFDPKDS             /* ICSF CRYPTO IBM */
 CSUSPEND             /* PPRC TSO CMDS */
 DD DELDSD            /* RACF DELETE DATASET PROFILE */
 DDTTAUTH             /* OPERTUNE */
 DEF                  /* IDCAMS DEFINE */
 DEFINE               /* IDCAMS DEFINE */
 DG DELGROUP          /* RACF DELETE GROUP PROFILE */
 DIAGNOSE             /* EMCAGENT */
 DISKMAP              /* CBT DISKMAP */
 DU DELUSER           /* RACF DELETE USER PROFILE */
 EDGAUD               /* DFSSMrmm Security/Audit Reports */
 EDGBKUP              /* DFSSMrmm Backup and Restore */
 EDGHSKP              /* DFSSMrmm utility */
 EDGRPTD              /* DFSSMrmm Inventory reports */
 EDGUPDT              /* DFSSMrmm update utility */
 EDGUTIL              /* DFSSMrmm utility */
 EDVAPI               /* ENDEVOR */
 EJESIENV             /* EJESENVx Inventory Query */
 EJESPOPT             /* Options Policy Manager */
 EJESPSEC             /* Internal Security Policy Mgr */
 EMCSNAP              /* EMC TIMEFINDER */
 EMCTF                /* EMC TIMEFINDER */
 EMCTFA               /* EMC TIMEFINDER */
 EMCTFU               /* EMC TIMEFINDER */
 EQACUOCM             /* DEBUG TOOL MONITOR INTERFAC*/
 ESTLIB               /* ES DYNAMIC STEPLIB */
 ESTLIBA              /* ES DYNAMIC STEPLIB */
 ESTLIBX              /* ES DYNAMIC STEPLIB */
 EXAMINE              /* IDCAMS Examine VSAM */
 EXCACCTX             /* TSO ACCOUNTING */
 EXCSHARD SHARDISK    /* ENQUE DSN WITHOUT DISP=OLD */
 EXEC EX IKJEXC2      /* TSO EXECUTE A CLIST/EXEC */
 EXPORT EXP           /* IDCAMS EXPORT DATA */
 EYU9XENF             /* CPSM COMMANDS */
 FCESTABL             /* FLASH COPY CMDS */
 FCQUERY              /* FLASH COPY CMDS */
 FCWITHDR             /* FLASH COPY CMDS */
 FDRCPK               /* FDR Compaktor */
 FDREPORT             /* FDR Reporting */
 FDRQUERY             /* FDR Query */
 FDRSRSA              /* FDR */
 FIND                 /* FIND MEMBER */
 FREE UNALLOC         /* TSO FREE ALLOCATION */
 FTP                  /* TCP/IP FILE TRANSFER FTP */
 GENJISPF             /* HOTSITE MARKASWEGAN */
 GIMSMP               /* SMPE */
 GVBACTV              /* HYPER-BUF ACTIVATE */
 GVBSDACT             /* HYPER-BUF DEACTIVATE*/
 HZSPRNT              /* HEALTH CHECK PGM */
 IAMRECVR             /* IAM ISPF */
 ICADCFGS             /* FIREWALL IBM'S SECUREWAY */
 ICADCT               /* FIREWALL IBM'S SECUREWAY */
 ICADDCT              /* FIREWALL IBM'S SECUREWAY */
 ICADFTPD             /* FIREWALL IBM'S SECUREWAY */
 ICADIKED             /* FIREWALL IBM'S SECUREWAY */
 ICADPFTP             /* FIREWALL IBM'S SECUREWAY */
 ICADSLOG             /* FIREWALL IBM'S SECUREWAY */
 ICADSOCK             /* FIREWALL IBM'S SECUREWAY */
 ICADSOXD             /* FIREWALL IBM'S SECUREWAY */
 ICADSTAK             /* FIREWALL IBM'S SECUREWAY */
 ICHDSM00             /* RACF DATASET MONITOR PGM */
 ICHUT100             /* RACF CROSS-REFERENCE PGM */
 ICHUT200             /* RACF DATABASE VERIFY PGM */
 ICHUT400             /* RACF DATABASE SPLIT/MERGE */
 ICKDSF               /* DSF */
 ICQASLI0             /* IBM APPC */
 IDCAMS               /* IBM IDCAMS */
 IEFBR14              /* DO NOTHING PROGRAM */
 IEHPROGM             /* DFSMS/MVS */
 IHVUUSD              /* IHV ENTRY */
 IKJEFF76             /* COMMAND AUTHORIZATION CHECK*/
 IKJEHDS1             /* LISTDS COMMAND PROCESSOR */
 IMP                  /* IDCAMS IMPORT */
 IMPORT               /* IDCAMS IMPORT */
 IOEAGFMT             /* DFS */
 IOEAGSLV             /* DFS */
 IOEBAK               /* DFS */
 IOEBOS               /* DFS */
 IOECM                /* DFS */
 IOEDCEER             /* DFS */
 IOEDFSXP             /* DAEMON PER IBM */
 IOEFTS               /* DFS */
 IOEGRWAG             /* DFS */
 IOEMAPID             /* DFS */
 IOENEWAG             /* DFS */
 IOESALVG             /* DFS */
 IOESCOUT             /* DFS */
 IOEUDBG              /* DFS */
 IOEZADM              /* DFS */
 IRRDPI00             /* RACF DYNAMIC PARSE */
 IRRDSC00             /* RACF DATABASE RESTRUCTURE */
 IRRUT100             /* RACF CROSS-REFERENCE PGM */
 IRRUT200             /* RACF DATABASE VERIFY PGM */
 IRRUT400             /* RACF DATABASE SPLIT/MERGE */
 IRRXUTI2             /* RACF UTILITY */
 ITPENTER             /* IBM    WORKLOAD SIMULATOR */
 IXCMIAPU             /* IBM LOGREC VIEWER */
 JCLCHECK EDCHEK      /* CA-JCLCHECKER */
 JCPAUT42             /* SEA JCLPLUS */
 JCPAUT43             /* SEA JCLPLUS */
 LD LISTDSD           /* RACF DISPLAY DATASET PROFILE */
 LG LISTGRP           /* RACF LIST GROUP PROFILE */
 LISTB LISTBC         /* LIST BRODCAST MESSAGES */
 LISTD LISTDS         /* LIST DATASET INFO COMMAND */
 LISTDATA LDATA       /* LIST CACHE DEVICE INFO */
 LPQ                  /* TCP/IP LINE PRINT QUERY */
 LPR                  /* LPR */
 LPRM                 /* TCP/IP LINE PRINT REMOVE JOB */
 LU LISTUSER          /* RACF DISPLAY USER PROFILE */
 MCR01IKB             /* MAINSTAR CR */
 MODDVIPA             /* VIPA CREATE/DELETE */
 MVPXDISP             /* TCP/IP DEBUG AID */
 MXITSF               /* MXI EXCUTL.MXI.** CBT409/10*/
 NAVGRAPH             /* BMC PARAMOUNT */
 NDVRC1               /* ENDEVOR */
 OPER                 /* TSO OPERATOR COMMAND */
 OPERATOR             /* TSO OPERATOR COMMAND */
 OPSCMD OC            /* CA-OSP/MVS II */
 OPSCONSL             /* CA-OSP/MVS II */
 OPSOSCMD             /* CA-OSP/MVS II */
 OPSREPLY             /* CA-OSP/MVS II */
 OPSWTO               /* CA-OSP/MVS II */
 PARMLIB IKJPRMLB     /* LIST ACTIVE PARMLIB TSO INFO */
 PASSWORD PW          /* RACF CHANGE PASSWORD */
 PDSCLEAN             /* PDSCLEAN - CBTTAPE FILE 693*/
 PE PERMIT            /* RACF PERMISSIONS */
 PHRASE               /* RACF ASSIGN PASS-PHRASE */
 PING                 /* TCP/IP PING */
 PMGLAUTH             /* BMC RESOLVE PERFORMANCE MONITOR*/
 PRCALTSR             /* BMC SOFTWARE, INC */
 PRINT                /* IDCAMS PRINT */
 PRINTDS PR           /* TSO PRINT DATASET */
 IKJEFY50             /* TSO PRINT DATASET */
 PROFILE PROF         /* TSO PROFILE DISPLAY */
 PTLTSRB              /* PLATINUM DB2 */
 QQD$AUTH             /* SAMS:DEFRAG */
 RACDCERT             /* RACF MANAGE CERTS */
 RACLINK              /* RACF MANAGE LINKS */
 RACMAP               /* RACF MAP COMMAND */
 RACONVRT             /* CONVERT UADS TO RACF FORMAT*/
 RACPRIV              /* RACF PRIVILEGE DISPLAY */
 RALT RALTER          /* RACF ALTER */
 RDEF RDEFINE         /* RAC PROTECT RESOURCES AND GAC */
 RDEL RDELETE         /* RACF REMOVE RESOURCES AND GAC */
 RE REMOVE            /* RACF DELETE USERS FROM GROUP */
 RECEIVE              /* RECEIVE JES SPOOL DATA */
 REPRO                /* IDCAMS COPY/REPRO COMMAND */
 REVVSAM              /* REVIEW VSAM CBT F134/135 */
 RL RLIST             /* RACF DISPLAY RESOURCE PROFILE */
 RMM                  /* IBM RMM PRIMARY COMMAND */
 RQUERY               /* PPRC CMNDS */
 RSDTASK              /* RSD: EOS INTERFACE MODU LE */
 RSESSION             /* PPRC CMNDS */
 RSH                  /* TSO REMOTE COMMAND */
 RSI250               /* BMC SOFTWARE, INC */
 RVARY                /* RACF CONTROL RACF OPERATION */
 RVOLUME              /* PPRC CMNDS */
 SARSMFT              /* CAVIEW */
 SCCAUTH              /* BMC RECOVER MGR */
 SE SEND              /* SEND USER MESSAGE COMMAND */
 SETCACHE SETC        /* MANAGE CACHE DEVICES */
 SETR SETROPTS        /* RACF SET OPTIONS */
 SGCFINTF             /* BMC SOFTWARE, INC */
 SGZILLA              /* BMC SOFTWARE, INC */
 SHCDS                /* VSAM RLS */
 SHOWZOS              /* Z/OS INFO DISPLAY CBT 492 */
 SI067DC0             /* CATALOG RECOVERY PLUS */
 SR SEARCH            /* RACF SEARCH PROFILES */
 STATUS ST IKJEFFCA   /* TSO STATUS OF JOBS */
 STEPLIB              /* DYNAMIC STEPLIB - CBT 452 */
 SUBMIT SUB           /* TSO SUBMIT JCL */
 SYNC                 /* SYNC UADS AND BRODCAST DSNS*/
 SYSPROG              /* BMC */
 TERM                 /* TSO TERMINAL COMMAND */
 TERMINAL             /* TSO TERMINAL COMMAND */
 TESTAUTH TESTA       /* TEST AUTHORIZED CMDS/PGMS */
 TMSIOCAP             /* CA-1 TMS */
 TMSSCR               /* CA-1 TMS */
 TRACERTE             /* TRACE TCP/IP ROUTE */
 TRANSMIT XMIT        /* JES DATASET TRANSMIT CMD */
 TSS                  /* TOP SECRET */
 USTATUS              /* FDR UPSTREAM */
 USTCMD               /* FDR UPSTREAM */
 USTDUPRT             /* FDR UPSTREAM */
 USTMONA              /* FDR UPSTREAM */
 USTRPORT             /* FDR UPSTREAM */
 VERIFY               /* TSO VERIFY COMMAND */
 VFY                  /* TSO VERIFY COMMAND */
 VHCR190$             /* HIPER-CACHE */
 VLFNOTE              /* notify VLF of update */
 VMCF60               /* VPS MON & CON FAC */
 VMCF62               /* VPS MON & CON FAC */
 VPEHSAUT             /* CA-DOCVIEW/VPE */
 VSAMASST             /* Rocket Software VSAM Assist */
 XADDPAIR             /* XRC CMNDS */
 XADVANCE             /* XRC CMNDS */
 XCOUPLE              /* XRC CMNDS */
 XDELPAIR             /* XRC CMNDS */
 XEND                 /* XRC CMNDS */
 XQUERY               /* XRC CMNDS */
 XRECOVER             /* XRC CMNDS */
 XSET                 /* XRC CMNDS */
 XSTART               /* XRC CMNDS */
 XSTATUS              /* XRC CMNDS */
 XSUSPEND             /* XRC CMNDS */
