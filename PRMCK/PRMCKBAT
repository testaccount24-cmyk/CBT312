/* REXX **************************************************************/
/*                                                                   */
/*  member name:    PRMCKBAT                                         */
/*                                                                   */
/*  member type:                                                     */
/*                                                                   */
/*  Author:         Hartmut                        DATE: 2018-09-05  */
/*                                                                   */
/*  Description:    Interface to LBD's EDIT macro PRMCK ___________  */
/*                  _______________________________________________  */
/*                  _______________________________________________  */
/*                  _______________________________________________  */
/*                                                                   */
/*  History:  (most recent on top)                                   */
/*  ver  ___date___ who comment                                      */
/*  1.3  2018-10-01 HB  - cosmetics                                  */
/*  1.2  2018-09-13 HB  - get mem_patterns = PRMCK('DEFAULTS')       */
/*                        (requires PRMCK version 2.*)               */
/*                      - bug fix: check listdsi rc                  */
/*                      - check active ISPF environment (initial)    */
/*  1.1  2018-09-12 HB  - add ZISPFRC                                */
/*  1.0  2018-09-05 HB  _initial_                                    */
/*                                                                   */
/*********************************************************************/
/* PARMS:  PARMIN(ddname)  - default PARMIN                          */
/*********************************************************************/
/* testrun                 ///DEBUG(ON)                              */
/* testrun PARMIN(DD01)    ///DEBUG(ON)                              */
/*                                                                   */
/*********************************************************************/
/* WISH(es):                                                         */
/*   ISPFSTATS for PARMLIB members                                   */
/*********************************************************************/
  MyVersion = "1.2  2018-09-13"
  MyVersion = "1.3  2018-10-01"

  MyDesc    = "Interface to LBD's EDIT macro PRMCK"

  _junk_ = TRACE("N")

  signal on novalue name sub_novalue
  _junk_ = sub_init()
  if sysispf = "ACTIVE" ,
  then nop
  else do
           say " "
           say ""mymsgid"Error" ,
               "- an ACTIVE ISPF environment is required."
           say " "
           exit 20
       end
  rcode = 0
  maxcc = 0
  parse upper arg all_parms
  parse var   all_parms 1 arg_parms "///" run_parms
  parse var   run_parms 1 . ,
                        1 . "DEBUG("   _debug_   ")" . ,
                          .
  if _debug_ = "ON" ,
  then do
          SAY ""mymsgid"DEBUG - started ... (version: "MyVersion")"
          say " "
          _junk_ = TRACE("R")
       end

  _timestamp_ = timestamp()
  say mymsgid""_timestamp_" - started ...",
                          "(version: "MyVersion")"
  say mymsgid""_timestamp_"   ("MyDesc")"
  say " "
  if pos("?",all_parms) > 0 ,
  then do
          _junk_ = sub_help()
          maxcc = 1
       end
  if maxcc = 0 ,
  then do
          rcode = sub_parameter_check(arg_parms)
          maxcc = max(maxcc,rcode)
       end
  if maxcc = 0 ,
  then do
          rcode = sub_main()
          maxcc = max(maxcc,rcode)
       end
  if maxcc = 0 ,
  then do
          /* rcode = sub_xyz()        */
          /* maxcc = max(maxcc,rcode) */
       end


  _timestamp_ = timestamp()
  say " "
  if maxcc = 0 ,
  then nop
  else do
          say mymsgid""_timestamp_" - please check message(s)"
       end
  say mymsgid""_timestamp_" - ending with MAXCC="maxcc
  say " "
  if ispfback = "YES" ,
  then do
          zispfrc = maxcc
          address ispexec "VPUT (ZISPFRC)"
       end
 exit maxcc

/* ----------------------------------------------------------------- */
/*  main-section                                                     */
/* ----------------------------------------------------------------- */
sub_main:
  rcode = 0
  /* ... your code ...   */
  n=0
  do idx = 1 to words(parmlibs)
     n=n+1;parmlib.n = word(parmlibs,idx)
     parmlib.0 = n
  end
  do idx = 1 to parmlib.0
     parmdd = parmlib.idx
     parse value "" with listdsi_rc sysreason sysdsname sysvolume
     parse value "" with SYSMSGLVL1 SYSMSGLVL2
     listdsi_rc = listdsi(parmdd" FILE")
     parmlib.idx.1 = parmdd
     parmlib.idx.2 = listdsi_rc
     parmlib.idx.3 = sysdsname
     parmlib.idx.4 = sysvolume
     _msgtxt_ = left("############",03) ,
                left(" RC         ",04) ,
                left("DDNAME      ",08) ,
                left("DSNAME      ",35) ,
                left("VOLSER      ",06) ,
                ""
     say mymsgid""_msgtxt_
     _msgtxt_ = left(copies("-",30),03) ,
                left(copies("-",30),04) ,
                left(copies("-",30),08) ,
                left(copies("-",30),35) ,
                left(copies("-",30),06) ,
                ""
     say mymsgid""_msgtxt_
     _msgtxt_ = right(idx,3,0) ,
                right(parmlib.idx.2,04) ,
                left(parmlib.idx.1,08) ,
                left(parmlib.idx.3,35) ,
                left(parmlib.idx.4,06) ,
                ""
     say mymsgid""_msgtxt_
     maxcc = max(maxcc,parmlib.idx.2)
     if parmlib.idx.2 = 0 ,
     then do
             rcode = sub_get_members_to_be_processed(parmdd)
             maxcc = max(maxcc,rcode)
          end
  end
 return rcode


/* ----------------------------------------------------------------- */
/*  sub-procedures                                                   */
/* ----------------------------------------------------------------- */
sub_init:
  /* to get the correct name for MYMSGID don't use other cmds before */
  parse source ,
              rexx_env                  ,
              rexx_inv                  ,
              rexx_name                 ,
              rexx_dd                   ,
              rexx_dsn                  ,
              rexx_invokename           ,
              rexx_initial_host_com_env ,
              rexx_addrspc              ,
              rexx_user_token           ,
              rexx_unknown

  rexx_program_type = "EXEC"
  select
    when ( rexx_name                             <> "?" ) then nop
    when ( rexx_dd                               <> "?" ) then nop
    when ( rexx_dsn                              <> "?" ) then nop
    when ( rexx_invokename                       <> "?" ) then nop
    otherwise rexx_program_type = "LMOD"
  end
  myname = rexx_name
  if myname = "?" ,
  then do ;
           myname = sysvar("sysicmd")
           if length(myname) = 0 ,
           then  myname = sysvar("syspcmd")
       end;
  mymsgid = left(myname":",10)

  parse value "" with _null_

  sysname   = MVSVAR("SYSNAME")
  sysplex   = MVSVAR("SYSPLEX")
  jobname   = MVSVAR("SYMDEF","JOBNAME")
  lpar      = MVSVAR("SYMDEF","LPAR")
  sysispf   = SYSVAR("SYSISPF")              /* ACTIVE or NOT ACTIVE */
  sysenv    = SYSVAR("SYSENV")               /* FORE   or BACK       */
  sysnest   = SYSVAR("SYSNEST")              /* YES    or NO         */
  sysoslvl  = MVSVAR("SYMDEF","SYSOSLVL")    /* Z1020200 - 02.02.00  */

  if sysispf"-"sysenv = "ACTIVE-BACK" ,
  then ispfback = "YES"
  else ispfback = "NO"

  parmin.0   = 0
  myparmin.0 = 0
  member.0   = 0
  summary.0  = 0
  global_vars = "myname   mymsgid  " ,
                "maxcc             " ,
                "_null_            " ,
                "parmin. myparmin. " ,
                "default_MEMBINCL  MEMBINCL MEMBEXCL " ,
                "EDITMACN EDITMACP " ,
                "member.           " ,
                ""
  global_vars = space(global_vars,1)
 return 0

/* ----------------------------------------------------------------- */
timestamp: procedure
  _time_  = time("N")
  /*
  _time_  = time("L")
  */
  _dates_ = date("S")
  dateiso = translate("1234-56-78",_dates_,"12345678")
  _str_ = dateiso" "_time_
 return _str_

/* ----------------------------------------------------------------- */
sub_help:
  SAY "Sorry, HELP is not available."
  SAY "... perhaps in future ..."
  /*
  PARMDSN SYS1.PARMLIB
  PARMDSN SYS1.PARMLIB CAT (default) or SYS1.PARMLIB . (place holder)
  PARMDSN SYS1.PARMLIB . VOL001 ...
  */
 return 0

/* ----------------------------------------------------------------- */
sub_parameter_check:
  rcode = sub_parm_defaults("INIT")
  parmin_default = "PARMIN"
  parse arg parms_to_check
  parse var parms_to_check 1 . ,
            1 . "PARMIN("   _parmin_   ")" . ,
              .
  if   _parmin_ = _null_ ,
  then _parmin_ = parmin_default
  _parmin_      = strip(_parmin_)

  read_parmin = "YES"
  listdsi_rc = listdsi(_parmin_" FILE")
  listdsi_rc = listdsi_rc + 0
  sysreason  = sysreason  + 0
  if listdsi_rc"#"sysreason = "16#2" ,
  then read_parmin = "NO"
  if read_parmin = "YES"  ,
  then do
          say mymsgid"read from DD "_parmin_" ..."
          rcode = sub_parameter_read(_parmin_)
          if rcode = 0 ,
          then do
                   rcode = sub_parameter_analyze()
               end
       end
  else do
          say mymsgid"use default values"
          rcode = 0
       end
  rcode = sub_parm_defaults("SET")
 return rcode

/* ----------------------------------------------------------------- */
sub_parameter_read:
  parse arg ddname .
  address TSO
  "EXECIO * DISKR "ddname" (STEM parmin. FINIS)"
  read_rc = rc
  if read_rc = 0 ,
  then do
          if parmin.0 = 0 ,
          then do
                  say mymsgid"no lines(s)  read from "ddname
               end
          else do
                  column_line = ""
                  do cidx = 1 to 8
                     column_line = column_line"----+----"cidx
                  end
                  column_line = left(column_line,72)
                  say mymsgid"show parm(s) read from "ddname
                /*
                  say left("#####",3)""copies(" ",3)""copies("-",72)
                */
                  say left("#####",3)""copies(" ",3)""column_line
                  do idx = 1 to parmin.0
                     parmin.idx = strip(left(parmin.idx,72),"T")
                     say right(idx,3,0)"   "parmin.idx
                  end
                  say left("-----",3)""copies(" ",3)""copies("-",72)
                  say " "
               end
       end
  else do
          say " "
          say mymsgid"EXECIO read error - DD "left(ddname,8)"",
                     "- RC="read_rc
          rcode = 512
       end
 return rcode

/* ----------------------------------------------------------------- */
/* MACRO    PRMCK                                                    */
/* MACPARMS REPORT                                                   */
/* * COMMENT STARTING WITH * OR #                                    */
/* # COMMENT STARTING WITH # OR *                                    */
/* #        12345678 12345678 12345678                               */
/* INCL     PROG*    LNKLST*  LPALST*       # strip comment          */
/* EXCL     *BU                                                      */
/* #                                                                 */
/* PARMLIB                                                           */
/* PARMLIBS                                                          */
/* PARMDSN                                                           */
/* PARMDSNS                                                          */
/*                                                                   */
/* LOGLEVEL 0 - 3    (default 1 )                                    */
/* ISPFSTAT YES / NO (default)                                       */
/*                                                                   */
/* ----------------------------------------------------------------- */
sub_parameter_analyze:
  n=0
  do idx = 1 to parmin.0
     _parmin_ = strip(parmin.idx)
     select
       when (left(_parmin_,1) = "*" ) then iterate
       when (left(_parmin_,1) = "#" ) then iterate
       otherwise do
                   parse var _parmin_ 1 _parmin_ "#" .
                   _parmin_ = strip(left(_parmin_,72),"T")
                   n=n+1 ; myparmin.n = _parmin_
                   myparmin.0=n
                 end
     end
  end
  do idx = 1 to myparmin.0
     parm_line = myparmin.idx
     parse var parm_line _key_ _val_
     _key_ = strip(_key_)
     _val_ = space(strip(_val_),1)
     if left(_val_,1) = "=" ,
     then do
             parse var _val_ 1 . "=" _val_
             _val_ = space(strip(_val_),1)
          end
     select
       when ( _key_ = "MACRO"     ) then EDITMACN = word(_val_,1)
       when ( _key_ = "MACPARMS"  ) then EDITMACP =      _val_
       when ( _key_ = "MEMBINCL"  ) then MEMBINCL = MEMBINCL""_val_" "
       when ( _key_ = "MEMBEXCL"  ) then MEMBEXCL = MEMBEXCL""_val_" "
       when ( _key_ = "INCL"      ) then MEMBINCL = MEMBINCL""_val_" "
       when ( _key_ = "EXCL"      ) then MEMBEXCL = MEMBEXCL""_val_" "
       when ( _key_ = "PARMLIB"   ) then PARMLIBS = PARMLIBS""_val_" "
       when ( _key_ = "PARMLIBS"  ) then PARMLIBS = PARMLIBS""_val_" "
       when ( _key_ = "PARMDSN"   ) then nop
       when ( _key_ = "PARMDSNS"  ) then nop
       when ( _key_ = "PARMDSN"   ) then PARMDSNS = PARMDSNS""_val_" "
       when ( _key_ = "PARMDSNS"  ) then PARMDSNS = PARMDSNS""_val_" "
       when ( _key_ = "ISPFSTAT"  ) then nop
       when ( _key_ = "LOGLEVEL"  ) then nop
       otherwise do
           say mymsgid""left("WARNING   ",10)""left("parms   ",14),
                      "unsupported keyword: "_key_
           say " "
           rcode = max(rcode,8)
         end
     end
  end
 return rcode

/* ----------------------------------------------------------------- */
sub_parm_defaults:
  parse upper arg _mode_ .
  select
    when ( _mode_ = "INIT" ) ,
      then do
              n=0
              n=n+1;defaults.n.1 = "LOGLEVEL" ;defaults.n.2=1
              n=n+1;defaults.n.1 = "ISPFSTAT" ;defaults.n.2="NO"
              n=n+1;defaults.n.1 = "PARMDSNS" ;defaults.n.2=""
              n=n+1;defaults.n.1 = "PARMLIBS" ;defaults.n.2="PARMLIB"
              n=n+1;defaults.n.1 = "MACRO"    ;defaults.n.2="PRMCK"
              n=n+1;defaults.n.1 = "MACPARMS" ;defaults.n.2="REPORT"
              n=n+1;defaults.n.1 = "MEMBEXCL" ;defaults.n.2="*BU"
              n=n+1;defaults.n.1 = "MEMBINCL" ;
                      defaults.n.2 = "PROG* LNKLST* LPALST*"
              defaults.0 = n
              default_LOGLEVEL = 1
              default_ISPFSTAT = "NO"
              default_PARMDSNS = ""
              default_PARMLIBS = "PARMLIB"
              default_EDITMACN = "PRMCK"
              default_EDITMACP = "-REPORT"
              default_MEMBEXCL = "*BU"
              default_MEMBINCL = "PROG* LNKLST* LPALST*"
              do idx = 1 to words(default_MEMBINCL)
                 default_MEMBINCL.idx = word(default_MEMBINCL,idx)
                 default_MEMBINCL.0   = idx
              end
              LOGLEVEL = _null_
              ISPFSTAT = _null_
              PARMDSNS = _null_
              PARMLIBS = _null_
              EDITMACN = _null_
              EDITMACP = _null_
              MEMBINCL = _null_
              MEMBEXCL = _null_
              rcode = 0
           end
    when ( _mode_ = "SET"  ) ,
      then do
             if LOGLEVEL = _null_ then LOGLEVEL = default_LOGLEVEL
             if ISPFSTAT = _null_ then ISPFSTAT = default_ISPFSTAT
             if PARMDSNS = _null_ then PARMDSNS = default_PARMDSNS
             if PARMLIBS = _null_ then PARMLIBS = default_PARMLIBS
             if EDITMACN = _null_ then EDITMACN = default_EDITMACN
             if EDITMACP = _null_ then EDITMACP = default_EDITMACP
             if MEMBEXCL = _null_ then MEMBEXCL = default_MEMBEXCL
             if MEMBINCL = _null_ ,
             then do
                     MEMBINCL = default_MEMBINCL
                     _cmd_ = "_str_ = "EDITMACN"('VERSION')"
                     interpret _cmd_
                     _cmd_ = "_str_ = "EDITMACN"('DEFAULTS')"
                     interpret _cmd_
                     parse var _str_ 1 _rc_ mem_patterns
                     if _rc_ = 0 ,
                     then do
                              if  mem_patterns <> _null_ ,
                              then MEMBINCL = mem_patterns
                          end
                  end

             LOGLEVEL = strip(word(LOGLEVEL,1))
             PARMDSNS = space(PARMDSNS,1)
             PARMLIBS = space(PARMLIBS,1)
             EDITMACN = space(EDITMACN,1)
             EDITMACP = space(EDITMACP,1)
             MEMBINCL = space(MEMBINCL,1)
             MEMBEXCL = space(MEMBEXCL,1)
             PARMDSNS = "(not supported yet)"
             ISPFSTAT = "(not supported yet)"
             LOGLEVEL = "(not supported yet)"
             say mymsgid""left("PARM-INFO",10)"PARMLIBS DD(s) "PARMLIBS
             say mymsgid""left("PARM-INFO",10)"MEMBINCL       "MEMBINCL
             say mymsgid""left("PARM-INFO",10)"MEMBEXCL       "MEMBEXCL
             say mymsgid""left("PARM-INFO",10)"EDITMACN       "EDITMACN
             say mymsgid""left("PARM-INFO",10)"EDITMACP       "EDITMACP
             say " "
             say mymsgid""left("PARM-INFO",10)"PARMDSNS DSNs  "PARMDSNS
             say mymsgid""left("PARM-INFO",10)"ISPFSTAT       "ISPFSTAT
             say mymsgid""left("PARM-INFO",10)"LOGLEVEL       "LOGLEVEL
             select
               when ( pos("*",parmlibs) > 0 ) then _msg_ = "P1"
               when ( pos("?",parmlibs) > 0 ) then _msg_ = "P1"
               when ( pos("%",parmlibs) > 0 ) then _msg_ = "P1"
               otherwise _msg_ = _null_
             end
             select
               when ( _msg_ = "P1" ) ,
                 then do
                         say " "
                         say mymsgid""left("ERROR    ",10)"PARMLIBS",
                           "    - generic values not allowed"
                         rcode = 8
                      end
               otherwise nop
             end
           end
    otherwise rcode = 504
  end

  membexcl.0 = 0
  membincl.0 = 0
  if rcode = 0 ,
  then do
          say " "
          /* now check, if member patterns are allowed         */
          /* MEMBINCL defaults must be considered, not shorter */
          if membexcl <> _null_ ,
          then do
                   do idx = 1 to words(membexcl)
                      _word_ = word(membexcl,idx)
                      membexcl.idx = _word_
                      membexcl.0   = idx
                      if left(_word_,1) = "*" ,
                      then nop
                      else do
                      xcode = sub_check_pattern_membincl(_word_)
                      rcode = max(rcode,xcode)
                           end
                   end
               end
          if membincl <> _null_ ,
          then do
                   do idx = 1 to words(membincl)
                      _word_ = word(membincl,idx)
                      membincl.idx = _word_
                      membincl.0   = idx
                      xcode = sub_check_pattern_membincl(_word_)
                      rcode = max(rcode,xcode)
                   end
               end
       end
 return rcode

/* ----------------------------------------------------------------- */
sub_check_pattern_membincl: procedure expose default_MEMBINCL. ,
                                             default_MEMBINCL  ,
                                      (global_vars)
  rcode = 0
  parse arg _pattern_ .
  _ll_ = length(_pattern_)
  select
    when ( right(_pattern_,1) = "*" ) ,
      then do
              word_base = left(_pattern_,_ll_-1)
           end
    otherwise word_base = _pattern_
  end
  if rcode = 0 ,
  then do
          pattern_invalid = "YES"
          do defidx = 1 to default_MEMBINCL.0
             def_word = default_MEMBINCL.defidx
             _dl_ = length(def_word)
             parse var def_word 1 def_word_base "*" .
             select
               when (        def_word_base=word_base      ) ,
                 then do
                         pattern_invalid = "NO"
                         leave
                      end
               when ( abbrev(def_word_base,word_base) = 1 ) ,
                 then do
                         pattern_invalid = "NO"
                         leave
                      end
               when ( abbrev(word_base,def_word_base) = 1 ) ,
                 then do
                         pattern_invalid = "NO"
                         leave
                      end
               otherwise nop
             end
          end
          if pattern_invalid = "YES" ,
          then do
                         say mymsgid""left("ERROR    ",10)"invalid",
                           "pattern   - reason: " ,
                           ""left(_pattern_,10)" not beginning like" ,
                           "PRMCK requirement: "default_MEMBINCL
                         rcode = 8
               end
       end
  if rcode = 0 ,
  then do
          do defidx = 1 to default_MEMBINCL.0
             def_word = default_MEMBINCL.defidx
             _dl_ = length(def_word)
             select
               when ( _pattern_ = def_word ) then nop
               when ( abbrev(def_word,word_base) = 1 ) ,
                 then do
                         say mymsgid""left("ERROR    ",10)"invalid",
                           "pattern   - reason: " ,
                           ""left(_pattern_,10)" < "left(def_word,10),
                           "- PRMCK requires at least "def_word
                         rcode = 8
                      end
               otherwise do
                 end
             end
          end
       end
  /*
  */
 return rcode

/* ----------------------------------------------------------------- */
sub_get_members_to_be_processed: procedure expose (global_vars)
 /*********************************************************************/
 /* Loop through all members in the PDS, issuing the EDIT service for */
 /* each.  The macro specified on the ISRMBRS invocation is passed as */
 /* an initial macro on the EDIT service call.                        */
 /*********************************************************************/
  parse arg _ddname_ .
  address ispexec
  "LMINIT DATAID(data1)    DDNAME("_ddname_") enq(shr)"
  memall.0 = 0
  "LMOPEN DATAID("data1") OPTION(INPUT)"
  lmrc = rc
  Do While lmrc = 0
     "LMMLIST DATAID("data1") OPTION(LIST)" ,
              "MEMBER(MEMBER) STATS(NO)"
     lmrc = rc
     If lmrc = 0 ,
     Then Do
              member = strip(member)
              do jjj = 1 to words(default_MEMBINCL)
                 _pattern_ = word(default_MEMBINCL,jjj)
                 parse var _pattern_ 1 _pattern_ "*" .
                 if abbrev(member,_pattern_) = 1 ,
                 then do
                          jj     = memall.0 + 1
                          memall.0 = jj
                          memall.jj = member
                      end
              end
          End
  End
  "LMCLOSE DATAID("data1") "
  say " "
  say " "
  _junk_ = sub_member_include_exclude()
  say " "
  "LMFREE DATAID("data1")"
 return 0

/* ----------------------------------------------------------------- */
sub_member_include_exclude:
  excluded.0 = 0
  member.0   = 0
  /* MEMBINCL MEMBEXCL   */
  do idx = 1 to memall.0
     _member_ = strip(memall.idx)
     _flag_    = "OK"
     if _flag_ = "OK" ,
     then do
             do jjj = 1 to words(MEMBEXCL)
               _pattern_ = word(MEMBEXCL,jjj)
                select
                  when (      _pattern_    = _member_  ) ,
                    then do
                                    _flag_ = "EXCLUDE"
                         end
                  when ( left(_pattern_,1) = "*" ) ,
                    then do
                            parse var _pattern_ 1 . "*" patt_base
                            patt_base = strip(patt_base)
                            ll_pb = length(patt_base)
                            if right(_member_,ll_pb) = patt_base ,
                            then    _flag_ = "EXCLUDED"
                         end
                  otherwise nop
                end
                if _flag_ = "OK" ,
                then nop
                else leave
             end
          end
     if _flag_ = "OK" ,
     then do
             do jjj = 1 to words(MEMBINCL)
               _pattern_ = word(MEMBINCL,jjj)
                select
                  when (      _pattern_    = _member_  ) ,
                    then            _flag_ = "INCLUDED"
                  when ( right(_pattern_,1) = "*" ) ,
                    then do
                            parse var _pattern_ 1 patt_base "*" .
                            patt_base = strip(patt_base)
                            ll_pb = length(patt_base)
                            if left(_member_,ll_pb) = patt_base ,
                            then    _flag_ = "INCLUDED"
                         end
                  otherwise nop
                end
                if _flag_ = "OK" ,
                then nop
                else leave
             end
          end
     if _flag_ = "INCLUDED" ,
     then do
              memidx          = member.0 + 1
              member.0        = memidx
              member.memidx   = _member_
              _msgtxt_ = copies("=",74)
              say mymsgid""_msgtxt_
              _msgtxt_ = "MEMBER "left(_member_,8)" - EDIT starting ..."
              say mymsgid""_msgtxt_
              say " "
              EDITMACP = "-REPORT"
              Address ispexec ,
                       "EDIT DATAID("data1") MEMBER("_member_")" ,
                       "PARM(EDITMACP)" ,
                       "MACRO("EDITMACN")"
              rcode = rc
              /* Return codes                     */
              /*  4 - Data not saved              */
              address ispexec "vget (editrc editmsg)"
              if rcode = 4 then rcode = 0
              if datatype(editrc) = "NUM" ,
              then rcode = max(rcode,editrc)
              if editrc = 0 ,
              then nop
              else do
                      /*
                       say editmsg
                      */
                   end
              _msgtxt_ = "MEMBER "left(_member_,8)" - RC="rcode
              say mymsgid""_msgtxt_
              maxcc = max(maxcc,rcode)
              say " "
          end
  end
 return 0

/* ----------------------------------------------------------------- */
/*********************************************/
/* Trap uninitialized variables              */
/*********************************************/
sub_novalue:
  Say " "
  Say "Variable" condition("Description") ,
      "undefined in line" sigl":"
  Say " "
  Say sourceline(sigl)
  Say " "
  if sysvar("sysenv") <> "FORE" then exit 8
  say "Report the error in this application",
      "along with the syntax used."
 exit 8
