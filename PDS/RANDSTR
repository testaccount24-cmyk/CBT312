/* --------------------  rexx procedure  -------------------- *
 | Name:      randstr                                         |
 |                                                            |
 | Function:  Generate a unique character string for use      |
 |            in an ISPF Table name, DDName, etc.             |
 |                                                            |
 |            This is for ISPF dialogs that may run           |
 |            concurrently in either multiple split           |
 |            screens or stacked so as to prevent duplicate   |
 |            DD or ISPF table names.                         |
 |                                                            |
 |            Or any length string with or without            |
 |            lowercase characters.                           |
 |                                                            |
 |            Thus this can be used to generate a random      |
 |            password or passphrase                          |
 |                                                            |
 |            This may also be used for any other need        |
 |            to have a unique character string that is       |
 |            a valid DDName, Member Name, etc.               |
 |                                                            |
 | Syntax:    x = randstr(n)                                  |
 |                                                            |
 |            Where n is the number of characters to          |
 |            return, always starting with an alpha.          |
 |                                                            |
 |            The default if not provided is 8                |
 |                                                            |
 |            If 'n' is preceded by L (e.g. L8) then          |
 |            50% of the characters will be lowercase         |
 |                                                            |
 | Notes:     In testing this generated 0 duplicates in 10    |
 |            tests with 100,000 iterations so this looks     |
 |            reasonably random - when n is 8.                |
 |                                                            |
 |            Using less than 8 will result in a higher       |
 |            probability of duplicates and using more        |
 |            will result in lowering the probabilty of       |
 |            duplicates.                                     |
 |                                                            |
 |            DO NOT call this routine RANDOM as it will      |
 |            confuse the use of the REXX RANDOM function     |
 |            within the code.                                |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            02/27/18 - Ensure 1st position is alpha         |
 |            02/26/18 - Add LOTS of comments                 |
 |            02/23/18 - Insure 1st char is not special char  |
 |                     - Allow a parm for # of characters     |
 |                     - Allow Lowercase in string            |
 |            02/22/18 - Additional doc and randomness        |
 |            02/21/18 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */
  arg numchars

/* ------------------------------------ *
 | Check for L (lower case) in the parm |
 |  - set lowercase flag on             |
 |  - remove L from the parm (numchars) |
 | Otherwise set lower case flag off    |
 * ------------------------------------ */
  if left(numchars,1) = 'L' then do
    lowcase = 1
    numchars = substr(numchars,2)
  end
  else lowcase = 0

/* ----------------------------------------------------- *
 | Check that numchars is numeric otherwise default to 8 |
 * ----------------------------------------------------- */
  if datatype(numchars) /= 'NUM' then numchars = 8

/* -------------------------- *
 | Define our default strings |
 * -------------------------- */
  alpha  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ$#@'
  lowchar= 'abcdefghijklmnopqrstuvwxyz'
  alpha# = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ$#@0123456789'

/* -------------------------------------- *
 | Use 24 digit precision in calculations |
 * -------------------------------------- */
  numeric digits 24

/* ----------------------------- *
 | Get random character position |
 * ----------------------------- */
  ra = random(1,26)
/* ------------------------------------------ *
 | Start the return with the random character |
 | - then append the seconds since midnight   |
 |   multiplied by a random 5 digit number    |
 |   and then multiply again by another       |
 |   random 5 digit number.                   |
 | Then truncate at the request number of     |
 | characters (numchars)                      |
 * ------------------------------------------ */
  r = left(substr(alpha,ra,1) || ,
    time('s') * random(99999) ,
    * random(99999),numchars)

/* --------------------------------------------------- *
 | Overlay the returned string with 3 different random |
 | characters from the alpha string to make it more    |
 | random.                                             |
 | ra = random char location                           |
 | rc = random target location                         |
 * --------------------------------------------------- */
  ra = random(1,29);rc = random(2,numchars)
  r = overlay(substr(alpha,ra,1),r,rc,1)
  ra = random(1,29);rc = random(2,numchars)
  r = overlay(substr(alpha,ra,1),r,rc,1)
  ra = random(1,29);rc = random(2,numchars)
  r = overlay(substr(alpha,ra,1),r,rc,1)
  ra = random(1,29);rc = random(2,numchars)
  r = overlay(substr(alpha,ra,1),r,rc,1)

/* --------------------------------- *
 | Clean up any blanks in the return |
 | by replacing with random alpha#   |
 * --------------------------------- */
  do while pos(' ',r) > 0
    pb = pos(' ',r)         /* get position of blank           */
    ra = random(1,39)       /* get a random character position */
    /* now overlay the random character at the random position */
    r = overlay(substr(alpha#,ra,1),r,pb,1)
  end

/* ------------------------------------- *
 | Process Lowercase request if provided |
 | by overlaying 1/2 of all return chars |
 | with a lower case character.          |
 * ------------------------------------- */
  if lowcase = 1 then do
    lc = numchars%2       /* get 50% of requested length */
    do i = 1 to lc
      /* ra = random lowercase character location */
      /* rc = random character position location  */
      ra = random(1,26);rc = random(1,numchars)
      /* now overlay the random character at the random position */
      r = overlay(substr(lowchar,ra,2),r,rc,1)
    end
  end

/* --------------------- *
 | Now return the string |
 * --------------------- */
  return r
