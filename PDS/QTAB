  /* --------------------  rexx procedure  -------------------- */
  ver = '3.1'
  /*Name:      QTAB                                            |
  |                                                            |
  | Function:  Display Open ISPF Tables                        |
  |                                                            |
  | Syntax:    %QTAB table-name                                |
  |                                                            |
  |            table-name (optional)                           |
  |            - limit the display to that table               |
  |                                                            |
  | Usage Notes: Used to display open ispf tables              |
  |                                                            |
  | Commands:  FIND xxx                                        |
  |            REFresh                                         |
  | Options:   C to close the table using TBEND                |
  |            any-nonblank to display table structure         |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            04/03/23 - V3.1 - Add C (close) option          |
  |                     - Add REFresh command                  |
  |            06/16/22 - V3.0 - remove selected table display |
  |                       and use the tabdispl exec, now as a  |
  |                       subroutine to display selected table.|
  |            06/16/22 - V2.0 Add Key Indicator               |
  |            10/19/21 - Support row extension variables      |
  |            12/07/20 - Fix header alignment                 |
  |                     - If table date/time null set 'N/A'    |
  |            12/04/20 - Fix unknown zcmd processing          |
  |            11/12/20 - Add Find/RFind for selected Table    |
  |            03/07/20 - Enable RFIND                         |
  |            01/29/20 - Expand table name by 1               |
  |            01/08/20 - Add table-name option                |
  |                     - Find now more like locate with *     |
  |            01/06/20 - Add find command                     |
  |            10/21/19 - Add option to Select a table to      |
  |                       view specifics (not pretty but works)|
  |            04/13/18 - Update to fit in 80 bytes            |
  |            02/28/18 - Change tbend to tbclose              |
  |            11/02/16 - Add tutorial panel (short/sweet)     |
  |                     - Change table name color              |
  |            11/01/16 - Creation                             |
  |                                                            |
  * ---------------------------------------------------------- */

  arg table_name

  /* ------------- *
  | Define Address |
  * -------------- */
  Address ISPExec
  'Control Errors Return'
  null = ''

  /* --------------> Enable Repeat Find <------------------- *
  | This approach does not require recursion or creating an |
  | ISPF table for the applications commands. This approach |
  | updates the active site command table in memory.        |
  |                                                         |
  | This does:                                              |
  | 1. Define the commmand table entry                      |
  | 2. vget the variable with the prefix for the site ISPF  |
  |    command table.                                       |
  | 3. define a varable with the command table name         |
  | 4. Move to the top of the command table                 |
  | 5. Establish the table search                           |
  | 6. if the entry is found then add it                    |
  | 7. prime the variable to null                           |
  * ------------------------------------------------------- */
  zctverb = 'RFIND'
  zctact = "&USRRFIND"
  zctdesc = "User controlled Repeat Find (RFIND)"
  zcttrunc = 0
  'vget (zsctpref)'
  ctab = zsctpref'cmds'
  'tbtop' ctab
  'tbscan' ctab 'arglist(zctdesc) condlist(EQ) Next'
  if rc > 0 then 'tbadd' ctab
  usrrfind = null
  'vput (usrrfind)'

  /* ----------------------------------- *
  | Build ISPF Table for List of Tables |
  * ----------------------------------- */
  qtab = 'QTAB'random(9999)
Restart:
  'TBCreate' qtab 'Names(tab cdate ctime udate utime user rowcreat' ,
    'rowcurr rowupd tableupd status1 status2 keysn namesn' ,
    'status3 library virtsize keys names) nowrite'
  'qtabopen list(tabs)'

  /* ------------------------------------ *
  | Now add the open tables to our table |
  * ------------------------------------ */
  interpret 'count = tabs0'
  do i = 1 to count
    interpret 'tab =  tabs'i
    if table_name /= null
    then if tab /= table_name then iterate
    parse value '' with cdate ctime udate utime user rowcreat ,
      rowcurr rowupd tableupd status1 status2 ,
      status3 library virtsize keys names
    /* ------------------------------------- *
    | Get number of keys and names in table |
    * ------------------------------------- */
    'tbquery' tab 'keynum(keysn) namenum(namesn)' ,
      'keys(keys) names(names)'
    /* -------------------- *
    | Get Table Statistics |
    * -------------------- */
    'tbstats' tab 'cdate(cdate) ctime(ctime) udate(udate) utime(utime)' ,
      'user(user) rowcreat(rowcreat) rowcurr(rowcurr)' ,
      'rowupd(rowupd) tableupd(tableupd)' ,
      'status1(status1) status2(status2) status3(status3)' ,
      'library(library) virtsize(virtsize)'
    if strip(library)     = '' then library = 'ISPTLIB'
    /* -------------------------------- *
    | Clean up the numbers by adding 0 |
    * -------------------------------- */
    if pos('/',cdate) = 0 then cdate = 'N/A'
    if pos(':',ctime) = 0 then ctime = 'N/A'
    if datatype(keysn)    = 'NUM' then keysn = keysn + 0
    if datatype(namesn)   = 'NUM' then namesn = namesn + 0
    if datatype(rowcreat) = 'NUM' then rowcreat = rowcreat + 0
    if datatype(rowcurr)  = 'NUM' then rowcurr = rowcurr + 0
    if datatype(rowupd)   = 'NUM' then rowupd = rowupd + 0
    if datatype(tableupd) = 'NUM' then tableupd = tableupd + 0
    if datatype(virtsize) = 'NUM' then virtsize = virtsize + 0
    /* ------------------------------ *
    | Now translate the table status |
    * ------------------------------ */
    Select
      When status1 = 1 then
      status1 = 'Table exists in the table input library chain'
      When status1 = 2 then
      status1 = 'Table does not exist in the table input library chain'
      When status1 = 3 then
      status1 = 'Table input library is not allocated'
      Otherwise nop
    end
    Select
      When status2 = 1 then
      status2 = 'Table is not open in this logical screen'
      When status2 = 2 then
      status2 = 'Table is open in NOWRITE mode in this logical screen'
      When status2 = 3 then
      status2 = 'Table is open in WRITE mode in this logical screen'
      When status2 = 4 then
      status2 = 'Table is open in SHARED NOWRITE mode in this logical' ,
        'screen'
      When status2 = 5 then
      status2 = 'Table is open in SHARED WRITE mode in this logical' ,
        'screen'
      Otherwise nop
    end
    Select
      When status3 = 1 then
      status3 = 'Table is available for WRITE mode'
      When status3 = 2 then
      status3 = 'Table is not available for WRITE mode'
      Otherwise nop
    end
    /* --------------------------------------- *
    | Finally add the table info to our table |
    * --------------------------------------- */
    'tbadd' qtab
  end

  /* ---------------------------------- *
  | Reposition to the top of the table |
  | and sort it.                       |
  * ---------------------------------- */
  'TBTop' qtab
  'TBSort' qtab 'Fields(tab)'

  /* ---------------------- *
  | Load the ISPF Panel(s) |
  * ---------------------- */
  load_info = loadispf()

  /* ------------------------------- *
  | Now display the table of tables |
  * ------------------------------- */
  top = 0
  do forever
    /* -------------------------------------------- *
    | Define USRRFIND for Passthru to enable RFIND |
    * -------------------------------------------- */
    usrrfind = 'PASSTHRU'
    'vput (usrrfind)'
    sel = null
    if top > 0 then do
      'tbtop' qtab
      'tbskip' qtab 'number('top')'
    end
    'TBDispl' qtab 'Panel(qtab)'
    trc = rc
    /* ----------------------- *
    | Reset USRRFIND to blank |
    * ----------------------- */
    usrrfind = ''
    'vput (usrrfind)'
    if trc > 0 then leave

    top = ztdtop
    if zcmd /= null then do
      zcmd = translate(zcmd)
      if abbrev('REFRESH',zcmd,3) = 1 then do
         'tbend' qtab
         signal restart
         end
      if word(zcmd,1) = 'RFIND' then do
        'tbtop' qtab
        'tbskip' qtab 'number('top')'
        zcmd = 'F' ftab
      end
      if word(zcmd,1) = 'F' then do
        ftab = word(zcmd,2)
        if pos('*',ftab) > 0 then do
          ftab = strip(translate(ftab,' ','*'))
        end
        wrap = 0
        do forever
          'tbskip' qtab
          'tbget' qtab
          if rc > 0 then do
            if wrap = 1 then leave
            'tbtop' qtab
            wrap = 1
          end
          if pos(ftab,tab) > 0 then do
            'tbquery' qtab 'position(top)'
            if wrap = 1 then do
              zedsmsg = 'Wrapped.'
              zedlmsg = 'Found the requested table.'
            end
            else do
              zedsmsg = 'Found.'
              zedlmsg = 'Found the requested table.'
            end
            'setmsg msg(isrz001)'
            leave
          end
        end
      end
    end
    else Select
      when sel = null then nop
      when sel = 'C' then
        if tab /= qtab then do
        'tbend' tab
        if rc = 0 then do
          zedsmsg = 'Closed.'
          zedlmsg = tab 'was closed using TBEND.'
          'setmsg msg(isrz001)'
        end
        else do
          zedsmsg = zerrsm
          zedlmsg = zerrlm
          'setmsg msg(isrz001)'
        end
      end
      else do
          zedsmsg = 'Left Open.'
          zedlmsg = tab 'was not closed as it is used by QTAB.'
          'setmsg msg(isrz001)'
        end
      otherwise call do_table
    end
    sel = null
  end

  /* ---------------------- *
  | Done so tbclose and Exit |
  * ---------------------- */
  'tbclose' qtab
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    "libdef" libd
    address tso "free f("dd")"
  end
  exit

Do_Table:
  x = tabdispl(tab)
  return

Tabdispl: Procedure
  /* --------------------  rexx procedure  -------------------- *
  | Name:      tabdispl                                        |
  |                                                            |
  | Function:  ISPF table layout display to show the config    |
  |            of an ISPF table (keys,names,savename) for      |
  |            each row with values.                           |
  |                                                            |
  | Syntax:    %tabdispl table-name                            |
  |                                                            |
  | Usage Notes:  The table may or may not be open             |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            2022/06/13 LBD - add stemedit instead of say    |
  |            2022/06/11 LBD - Created                        |
  |                                                            |
  * ---------------------------------------------------------- */
  arg table
  parse value '' with null
  c = 0
  maxl = 0

  if table = null then do
    say 'tabdispl requires a table name - please try again....'
    return 8
  end

  address ispexec
  'Control Errors Return'

  'tbopen' table 'nowrite'
  if rc < 13 then tbend = 0
  else tbend = 1
  if rc > 12 then do
    say zerrlm
    return rc
  end
  'tbquery' table 'keynum(keysn) namenum(namesn)' ,
    'keys(keys) names(names) rownum(rows)'

  parse value keys with '('keys')'
  parse value names with '('names')'

  'tbstats' table 'cdate(cd) ctime(ct) udate(ud) utime(ut) user(user)'

  if datatype(rows) = 'CHAR' then rows = 0

  call do_say 'Table name:' table
  call do_say 'Rows: ' rows+0
  call do_say 'Keys: ' keys
  if length(names) < 72
  then call do_say 'Names:' names
  else do
    xnames = names
    hdr = 'Names:'
    do until strip(xnames) = null
     if length(xnames) > 72
       then  p = lastpos(' ',xnames,73)
       else p = 0
      if p > 0 then do
        saynames = left(xnames,p)
        xnames = substr(xnames,p)
      end
      else do
        saynames = xnames
        xnames = null
      end
      call do_say hdr saynames
      xnames = strip(xnames)
      hdr = copies(' ',6)
    end
  end
  call do_say 'Creation Date/Time:' cd ct
  call do_say 'Update Date/Time:  ' ud ut 'By' user
  call do_say copies('-',80)
  call do_say ' '

  'tbtop' table
  row = 0
  do forever
    'tbskip' table
    if rc > 0 then leave
    row = row + 1
    call do_say 'Row:  ' row
    'tbget' table 'savename(save)'
    if save /= null then
    parse value save with '('save')'
    do i = 1 to words(keys)
      k = word(keys,i)
      call do_say 'Key: ' left(k,8) value(k)
    end
    do i = 1 to words(names)
      n = word(names,i)
      call do_say 'Name:' left(n,8) value(n)
    end
    do i = 1 to words(save)
      n = word(save,i)
      call do_say 'Save:' left(n,8) value(n)
    end
    call do_say copies('-',80)
  end

  if tbend = 1 then
  'tbend' table

   /* allocate a temp file to browse the results */
   tab_dd = "C"random()
   Address TSO
   "allocate file("tab_dd") reuse unit(vio) space(1 1)" ,
     "cyl dsorg(ps) recfm(v b) lrecl("maxl+4")"
   "execio * diskw" tab_dd "(stem say. finis)"
   address ispexec "lminit dataid(dataid) ddname("tab_dd")"
   address ispexec "view dataid("dataid")"
   address ispexec "lmfree dataid("dataid")"
   "free file("tab_dd")"

  Return 0

do_say:
  parse arg text
  c = c + 1
  say.c = text
  say.0 = c
  if length(text) > maxl
     then maxl = length(text)
  return

  /* --------------------  rexx procedure  -------------------- *
  * Name:      LoadISPF                                        *
  *                                                            *
  * Function:  Load ISPF elements that are inline in the       *
  *            REXX source code.                               *
  *                                                            *
  * Syntax:    load_info = loadispf()                          *
  *                                                            *
  *            The inline ISPF resources are limited to        *
  *            ISPF Messages, Panels, and Skeletons,           *
  *                 CLISTs and EXECs are also supported.       *
  *                                                            *
  *            The inline resources must start in column 1     *
  *            and use the following syntax:                   *
  *                                                            *
  *            >START    used to indicate the start of the     *
  *                      inline data                           *
  *                                                            *
  *            >END    - used to indicate the end of the       *
  *                      inline data                           *
  *                                                            *
  *            Each resource begins with a type record:        *
  *            >type name                                      *
  *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
  *                     name is the name of the element        *
  *                                                            *
  * Sample usage:                                              *
  *          -* rexx *-                                        *
  *          load_info = loadispf()                            *
  *          ... magic code happens here (your code) ...       *
  *          Address ISPEXEC                                   *
  *          do until length(load_info) = 0                    *
  *             parse value load_info with dd libd load_info   *
  *             if left(libd,6) = "ALTLIB" then do             *
  *                if libd = "ALTLIBC" then lib = "CLIST"      *
  *                                    else lib = "EXEC"       *
  *                Address TSO,                                *
  *                  "Altlib Deact Application("lib")"         *
  *                end                                         *
  *             else "libdef" libd                             *
  *             address tso "free f("dd")"                     *
  *             end                                            *
  *          exit                                              *
  *          >Start inline elements                            *
  *          >Panel panel1                                     *
  *          ...                                               *
  *          >Msg msg1                                         *
  *          ...                                               *
  *          >End of inline elements                           *
  *                                                            *
  * Returns:   the list of ddnames allocated for use along     *
  *            with the libdef's performed or altlib           *
  *                                                            *
  *            format is ddname libdef ddname libdef ...       *
  *                   libdef may be altlibc or altlibe         *
  *                   for altlib clist or altlib exec          *
  *                                                            *
  * Notes:     Entire routine must be included with REXX       *
  *            exec - inline with the code.                    *
  *                                                            *
  * Comments:  The entire rexx program is processed from the   *
  *            last record to the first to find the >START     *
  *            record at which point all records from that     *
  *            point on are processed until the >END           *
  *            statement or the end of the program is found.   *
  *                                                            *
  *            It is *strongly* suggested that the inline      *
  *            elements be at the very end of your code so     *
  *            that the search for them is faster.             *
  *                                                            *
  *            Inline ISPTLIB or ISPLLIB were not supported    *
  *            because the values for these would have to be   *
  *            in hex.                                         *
  *                                                            *
  * Author:    Lionel B. Dyck                                  *
  *                                                            *
  * History:                                                   *
  *            05/10/16 - correction for clist and exec        *
  *            04/19/16 - bug correction                       *
  *            06/04/04 - Enhancements for speed               *
  *            08/05/02 - Creation                             *
  *                                                            *
  * ---------------------------------------------------------- *
  * Disclaimer: There is no warranty, either explicit or       *
  * implied with this code. Use it at your own risk as there   *
  * is no recourse from either the author or his employeer.    *
  * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
  /* ------------------------------------------------------- *
  * Find the InLine ISPF Elements and load them into a stem *
  * variable.                                               *
  *                                                         *
  * Elements keyword syntax:                                *
  * >START - start of inline data                           *
  * >CLIST name                                             *
  * >EXEC name                                              *
  * >MSG name                                               *
  * >PANEL name                                             *
  * >SKEL name                                              *
  * >END   - end of all inline data (optional if last)      *
  * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
  /* --------------------------------------------------- *
  * Flag types of ISPF resources by testing each record *
  * then add each record to the data. stem variable.    *
  * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

  /* ----------------------------------------------------- *
  * Now create the Library and Load the Member(s)         *
  * ----------------------------------------------------- */
  Address ISPExec
  /* ----------------------------- *
  * Assign dynamic random ddnames *
  * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

  /* ---------------------------------------- *
  *  LmInit and LmOpen each resource library *
  * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

  /* ----------------------------------------------- *
  * Process all records in the data. stem variable. *
  * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
    /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
  /* ---------------------------------------------------- *
  * Processing completed - now lmfree the allocation and *
  * Libdef the library.                                  *
  * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

  /* --------------------------- *
  * Add the Member using LmmAdd *
  * based upon type of resource *
  * --------------------------- */
Add_It:
  if type = "Clist" then
  "LmmAdd dataid("clist") Member("name")"
  if type = "Exec" then
  "LmmAdd dataid("exec") Member("name")"
  if type = "Msg" then
  "LmmAdd dataid("msg") Member("name")"
  if type = "Panel" then
  "LmmAdd dataid("panel") Member("name")"
  if type = "Skel" then
  "LmmAdd dataid("skel") Member("name")"
  type = null
  return

  /* ------------------------------ *
  * ALlocate the temp ispf library *
  * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

  /* ------------------------------------------------ *
  | Here is the ISPF Panel that will be dynamnically |
  | loaded for use.                                  |
  * ------------------------------------------------ */
/*
>START
>PANEL QTAB
)Attr Default(%+_)
! type( input) intens(high) caps(on ) just(left ) hilite(uscore)
# type(output) intens(low ) caps(off) just(left) color(turq)
@ type(output) intens(low ) caps(off) just(left)
¬ type(output) intens(low ) caps(off) just(right)
$ type(  text) intens(high) caps(off) hilite(reverse)
)Body  Expand(//)
%-/-/-$List of Open ISPF Tables#ver%-/-/-
%Command ===>_zcmd                                 / /%Scroll ===>_amt +
%
%S Table         Keys    Names     Cdate     Ctime       UDate       UTime
%Userid       Rows        C-Rows   Rows-Upd  TableUpd
%Library   Storage
%Status (1-2-3)
-----------------------------------------------------------------------------
)Model
!z#z       +¬z       +¬z      +  +@z        @z          @z          @z
@z          ¬z       +¬z      + ¬z         +  ¬z     +
@z          ¬z       +
@z
@z
@z
-----------------------------------------------------------------------------
)Init
.help = QTABH
.zvars =  '(sel tab keysn namesn cdate ctime udate utime user +
rowcurr rowcreat +
rowupd tableupd library virtsize status1 status2 status3) '
&amt = CSR
)Reinit
)Proc
)End
>PANEL QTABH
)attr default(%+_)
$ type(  text) intens(high) caps(off) hilite(reverse)
)Body Expand(\\)
%-\-\-$List Active ISPF Tables%-\-\-
%Command ===>_ZCMD                                                             +
%
+All active ISPF Tables are displayed in a multi-row table with the
+following information:
+
+   Table Name                  Last Userid to Update
+   Keys count                  Row count current, at table create and updated
+   Names count                 Number of times the Table has been updated
+   Create Date and Time        Library (DDName)
+   Update Date and Time        Table Status info (3)
+
+Available Commands: %Find xxx+   find xxx in table name and reposition cursor
+                    %REFresh+    refresh the table of tables
+
+Selection Options:  %C+           Close using TBEND (or try)
+                    %non-blank+   Display the table structure and contents
+
+Note: Row extension variable names end with an%*+
)INIT
.cursor = &zcmd
)PROC
 &zup = qtabh
 &zcont = qtabh
)END
>END
*/
