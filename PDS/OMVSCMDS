  /* --------------------  rexx procedure  -------------------- */
  ver = '0.4'
  /*Name:      omvscmds                                        |
  |                                                            |
  | Function:  Issue any USS command and browse the results    |
  |                                                            |
  | Syntax:    %omvscmds command                               |
  |                                                            |
  |            command is optional and may be any shell        |
  |            command. If it arrives in all CAPS then it      |
  |            will be translated to all lowercase.            |
  |                                                            |
  | Usage Notes: display a prompt panel with table of recent   |
  |              the localrep ispf variable must be available  |
  |                                                            |
  |              The ISPF panel is dynamically loaded at       |
  |              startup and removed on exit.                  |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |     0.4    2025/05/28 LBD - Improve lower case test        |
  |     0.3    2025/05/28 LBD - Accept a command on entry      |
  |     0.2    2025/05/27 LBD - Refinement and cleanup         |
  |     0.1    2025/05/26 LBD - Copied from zigigcmd           |
  * ---------------------------------------------------------- */
  parse arg cmd

  /* ----------------------------- *
  | Set ISPExec                   |
  | Get env vars and set defaults |
  * ----------------------------- */
  Address ISPExec
  load_info = loadispf()
  call getenv
  dd = 'OC'time('s')
  parse value '' with null osel

  /* -------------------------------------------------- *
  | Check to see if the user has ISPTABL allocated and |
  | if not then use ISPPROF as our table DD            |
  * -------------------------------------------------- */
  isptabl = 'ISPTABL'
  x = listdsi(isptabl 'FILE')
  if x > 0 then isptabl = 'ISPPROF'

  /* ----------------------------------------------------- *
  | Open the table but if it doesn't exist then create it |
  * ----------------------------------------------------- */
  'TBOpen omvsucmd Library('isptabl') Write Share'
  if rc > 0 then do
  'tbcreate omvsucmd keys(ocmd) library('isptabl') write share'
  end

  /* -------------------- *
  | Setup table defaults |
  * -------------------- */
  ztdtop = 0
  ztdsels = 0

  /* ---------------------------------------------------------------- *
  | Process the table.                                               |
  |                                                                  |
  | All row selections will be processed and if none then the omvs   |
  | command will be executed.                                        |
  |                                                                  |
  | Row selections:  S to copy the command to the omvs command entry |
  |                  D to delete the command (supports multipe row   |
  |                    selections)                                   |
  |                  X to execute the command now and update the     |
  |                    omvs command entry field                      |
  * ---------------------------------------------------------------- */
  do forever
    if cmd = null then do
      if ztdsels = 0 then do
        'tbtop omvsucmd'
        'tbskip omvsucmd number('ztdtop')'
        'tbdispl omvsucmd panel(omvsucmd) cursor(omvscmd)'
      end
      else
      'tbdispl omvsucmd'
      if rc > 4 then leave
      'vput (copt) profile'
      if row = 0 then osel = null
      if row <> null then
      if row > 0 then do
        'TBTop omvsucmd'
        'TBSkip omvsucmd Number('row')'
      end
    end
    else do
      x = islower(cmd)
      if x = 0 then cmd = lower(cmd)
      omvscmd = cmd
      cmd = null
    end
    Select
      When translate(zcmd) = 'CLEAR' then do
        'tbclose omvsucmd replcopy library('isptabl')'
        'tberase omvsucmd library('isptabl')'
        'tbcreate omvsucmd keys(ocmd) library('isptabl') write share'
        omvscmd = null
      end
      When osel = 'D' then 'tbdelete omvsucmd'
      When osel = 'S' then do
        omvscmd = ocmd
        ztdsels = 0
      end
      When osel = 'X' then do
        omvscmd = ocmd
        ztdsels = 0
        call do_omvscmd
      end
      When omvscmd /= null then call do_omvscmd
      Otherwise nop
    end
    osel = null
  end

  /* -------------- *
  | Close and exit |
  * -------------- */
  'tbclose omvsucmd replcopy library('isptabl')'
  rc = dropispf(load_info)
  exit

  /* -------------------------------------------------------- *
  | Test if the command is all upper case by translating all |
  | lowercase to ` and then testing for that char            |
  * -------------------------------------------------------- */
IsLower:
  parse arg test
  lower = 'abcdefghijklmnopqrstuvwxyz'
  test  = space(translate(test,'`',lower),0)
  return pos('`',test)

  /* ---------------------------- *
  | Make a string all lower case |
  * ---------------------------- */
Lower:
  parse arg input
  out = translate(input,"abcdefghijklmnopqrstuvwxyz",,
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  return out

  /* ------------------------------------------------------------- *
  | Execute the git command                                       |
  | But 1st - check and remove git from the user provided command |
  * ------------------------------------------------------------- */
do_omvscmd:
  ocmd = omvscmd
  ocmd = omvscmd
  'tbadd omvsucmd'
  x = bpxwunix(ocmd,,so.,se.,env.)
  'vput (ocmd) shared'
  call view_std
  'verase (ocmd)'
  return

  /* -------------------------------------------- *
   | Get the environment variables passed by zigi |
   * -------------------------------------------- */
GetEnv:
  address syscall 'getpwnam' sysvar('sysuid') 'h.'
  env.1 = 'HOME='h.4
  env.0 = 1
  login = 1
  rc = bpxwunix('env',,s.,e.,env.,login)
  c = 0
  do i = 1 to s.0
     if pos('=',s.i) = 0 then iterate
     c = c + 1
     env.c = s.i
     end
  env.0 = c
  return

  /* ---------------------------------------------------------- *
  | Generalized routine to view stdout. (so.) or stderr. (se.) |
  | based on the parm passed                                   |
  * ---------------------------------------------------------- */
view_std:
  stdopt = 'B'
  'Control Display Save'
  /* ------------------------------- *
  | Randomly define a DDName to use |
  * ------------------------------- */
  dd = 'dd'random(9999)
  /* --------------------------------------- *
  | Get lrecl to determine dcb for temp d/s |
  * --------------------------------------- */
  vlrecl = 80
  do li  = 1 to so.0
     so.li = strip(so.li)
     if length(so.li) > vlrecl then vlrecl = length(so.li)
     if so.li = null then so.li = ' '
  end
  do li  = 1 to se.0
     se.li = strip(se.li)
     if length(se.li) > vlrecl then vlrecl = length(se.li)
     if se.li = null then se.li = ' '
  end
  sec = so.0 + se.0
  if length(ocmd) > vlrecl
     then vlrecl = length(ocmd)
  if vlrecl < 81 then vlrecl = 80
  else vlrecl = vlrecl + 4
  if vlrecl = 80 then vrecfm = 'f b'
  else vrecfm = 'v b'
  /* ------------------------------------------ *
  | Allocate a temporary data set for our data |
  * ------------------------------------------ */
  Address TSO
  'Alloc f('dd') new spa(5,5) tr' ,
    'recfm('vrecfm') lrecl('vlrecl') blksize(0)'
  stdopt = null
  sc = so.0
  do xi = 1 to se.0
     sc = sc + 1
     so.sc = se.xi
  end
  so.0 = sc
  drop se.
  /* ----------------------- *
  | Write out the stem data |
  * ----------------------- */
  if stdopt = null
  then do
     sc.1 = 'Command:' ocmd
     sc.2 = copies('-',80)
     sc.3 = ' '
     sc.0 = 3
     'Execio * diskw' dd '(stem sc.'
     'Execio * diskw' dd '(finis stem so.'
     drop so.
  end
  /* -------------------------------------------------- *
  | Access the Temporary Data Set using ISPF           |
  | Library Services.                                  |
  | Then using ISPF Browse service to browse the data. |
  | And use Library Services to Free the Data Set.     |
  * -------------------------------------------------- */
  Address ISPExec
  if sec > 0 then do
     'lminit dataid(ddb) ddname('dd')'
     if copt = 'B'
     then 'browse dataid('ddb')'
     else 'view   dataid('ddb')'
     'lmfree dataid('ddb')'
  end
  /* ----------------------------- *
  | Last Free the z/OS Allocation |
  * ----------------------------- */
  Address TSO ,
    'Free f('dd')'
  'Control Display Restore'
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *            rc = dropispf(load_info)                        *
 *                                                            *
 *            *** Note that dropispf is a routine at the      *
 *            *** bottom of this exec.                        *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          rc = dropispf(load_info)                          *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            01/09/19 - Include DROPISPF routine             *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC" then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    address tso "free f("dd")"
  end
  return 0

/*  Start of the inline ISPF Panels
>Start
>Panel omvsucmd
)Attr
 _ type( input) intens(low ) just(left ) hilite(uscore) caps(off)
 @ type(input ) caps(off) hilite(uscore) intens(low)
 $ type(input ) caps(on ) hilite(uscore) intens(low)
 Ý type(output) caps(off) intens(low) skip(on)
 # type(output) hilite(reverse) color(turq) caps(off)
)Body Expand(\\) Width(&zscreenw)
+OMVS Commands+\-\#cmdtitle         +\-\------------
+Command ===>_zcmd                             \ \+Scroll ===>_cscr+
+
+Enter any OMVS command:   Browse/View:$z+(B or V)
@omvscmd


+
+S+Command history (%D+delete%S+Select for edit and use%X+eXecute now)
+
)Model
$z+Ýocmd                 \ \ Ýos
)Init
 &cmdtitle = 'OMVS Commands &ver'
 .zvars = '(copt osel)'
 .help = omvscmdh
 &cscr = CSR
 if (&copt EQ &Z)
     &copt = B
)Proc
 &row = &z
 if (&ZCMD = &Z)
     if (&ztdsels = 0000)
        &row = .csrrow
        if (&row ¬= &z)
            if (&osel = &z)
                &osel = S
     if (&ztdsels ¬= 0000)
         &row = &z
     if (&osel ¬= &Z)
       if (&osel = '=')
           &osel = &osel
     &osel = &osel
 if (&row = 0)
     &osel = &z
 ver (&copt,list,B,V)
 ver (&osel,list,D,S,X)
)Field
 Field(ocmd) ind(os,'<>') len(255)
)End
>Panel omvscmdh
)attr default($+_)
  _ type( input) intens(low ) just(left ) hilite(uscore)
  ~ type(text) intens(high) caps(off) just(asis ) hilite(reverse) color(turq)
  Ý type(output) intens(high) caps(off) just(left) pas(on) skip(on)
)Body Expand(\\)
$Tutorial -\-\~OMVS Commands Tutorial$\-\- Tutorial
$Selection ===>_ZCMD                                                          +
+
+The OMVS Commands panel supports entering any OMVS shell command to be
+executed and have the results displayed using ISPF Browse or View.
+
+Additional commands may be entered using$&&+as a separator and
+requires$git+to be coded. Thus:
+
+  $cd /etc && ls -al
+
+All commands are saved in a push-down stack except for duplicates.
+
+Note: Any commands that prompt will$not+work as prompting is not
+possible using this interface (which is the$bpxwunix+service).
+
+Using the command$clear+will clean out all the entire command history.
+
+
+  "Life is 10% what happens to you and 90% how you react to it."
+        -- Charles R. Swindoll
+
)Init
 .cursor  = &zcmd
)PROC
 &zcont    = omvscmdh
)END
>End     */
