/* --------------------  rexx procedure  -------------------- *
 | Name:      EXTISPF                                         |
 |                                                            |
 | Function:  ISPF Edit Macro to extract imbedded ISPF        |
 |            elements into target PDS datasets               |
 |                                                            |
 |            All elements will be extracted from the         |
 |            active EXEC into datasets prefixed by           |
 |            the provided HLQ:                               |
 |                                                            |
 |            hlq.CLIST                                       |
 |            hlq.EXEC                                        |
 |            hlq.MSGS                                        |
 |            hlq.PANELS                                      |
 |            hlq.SKELS                                       |
 |                                                            |
 |            These datasets will be dynamically allocated    |
 |            using the DCB of the active dataset.            |
 |                                                            |
 | Syntax: EXTISPF hlq                                        |
 |                                                            |
 | Usage Notes:                                               |
 | 1. Requires a target PDS HLQ as the only parm              |
 | 2. The HLQ must be a full HLQ without quotes               |
 |    e.g. userid.EXTRACT                                     |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            05/18/18 - Major updates                        |
 |            08/28/17 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */
  Address ISREdit
  'Macro (targhlq)'

 if targhlq = '' then do
    say "A HLQ must be provided - e.g. 'userid.XXX'" ,
        "or just XXX "
    exit 8
    end

/* ------------------- *
 | Define our defaults |
 * ------------------- */
  parse value '' with null clist exec msgs panels skels type

  targhlq = fixup_dsn(targhlq)

/* ------------------------------------------ *
 | First validate the Target PDS Dataset Name |
 * ------------------------------------------ */
  if targhlq = null then do
    zedsmsg = 'Error'
    zedlmsg = 'EXTISPF requires a target-hlq'
    Address ISPExec 'Setmsg msg(isrz001)'
    exit 8
  end

/* ------------------------------------------------- *
 | Get the DCB characteristics of the source dataset |
 * ------------------------------------------------- */
  '(dataset) = dataset'
  call listdsi "'"dataset"'"

/* ------------------------------------------ *
 | Now Extract each Element to the Target PDS |
 * ------------------------------------------ */
  '(last) = linenum .zlast'
  hit = 0
  rec = 0
  dd = 'EP'random(9999)
  do i = 1 to last
    '(data) = line' i
    if translate(left(data,6)) = '>END' then do
      call write_it_out
      leave
    end
    if left(data,1) = '>' then do
      if hit = 1 then call write_it_out
      hit = 0
    end
    if hit = 1 then do
      rec = rec + 1
      member.rec = data
    end
    Select
      When translate(left(data,6)) = '>CLIST' then do
        if hit = 1 then call write_it_out
        hit = 1
        member = word(data,2)
        type = 'CLIST'
      end
      When translate(left(data,5)) = '>EXEC' then do
        if hit = 1 then call write_it_out
        hit = 1
        member = word(data,2)
        type = 'EXEC'
      end
      When translate(left(data,5)) = '>MSG' then do
        if hit = 1 then call write_it_out
        hit = 1
        member = word(data,2)
        type = 'MSGS'
      end
      When translate(left(data,6)) = '>PANEL' then do
        if hit = 1 then call write_it_out
        hit = 1
        member = word(data,2)
        type = 'PANELS'
      end
      When translate(left(data,5)) = '>SKEL' then do
        if hit = 1 then call write_it_out
        hit = 1
        member = word(data,2)
        type = 'SKELS'
      end
      Otherwise nop
    end
  end

/* -------------------------------- *
 | Now Display the Created Datasets |
 * -------------------------------- */
  Address ISPExec
  "LMDINIT LISTID(LISTID) LEVEL("targhlq")"
  "LMDDISP LISTID("ListId") Confirm(Yes)",
    "View(Volume)"
  "LMDFREE LISTID("ListId")"
  exit

/* ------------------------------------------------ *
 | Write out the element                            |
 |                                                  |
 | if the target type pds has not been created then |
 | create it.                                       |
 * ------------------------------------------------ */
Write_It_Out:
  hit = 0
  Address TSO
  Select
    When type = 'CLIST' then do
      if clist = null then do
        clist = "'"targhlq"."type"'"
        if sysdsn(clist) /= 'OK' then do
          'Alloc new tracks spa(15,15) dir(12) new' ,
            'dsname('clist')'
          'Free ds('clist')'
        end
      end
    end
    When type = 'EXEC' then do
      if exec = null then do
        exec = "'"targhlq"."type"'"
        if sysdsn(exec) /= 'OK' then do
          'Alloc new tracks spa(15,15) dir(12) new' ,
            'dsname('exec')'
          'Free ds('exec')'
        end
      end
    end
    When type = 'MSGS' then do
      if msgs = null then do
        msgs = "'"targhlq"."type"'"
        if sysdsn(msgs) /= 'OK' then do
          'Alloc new tracks spa(15,15) dir(12) new' ,
            'dsname('msgs')'
          'Free ds('msgs')'
        end
      end
    end
    When type = 'PANELS' then do
      if panels = null then do
        panels = "'"targhlq"."type"'"
        if sysdsn(panel) /= 'OK' then do
          'Alloc new tracks spa(15,15) dir(12) new' ,
            'dsname('panels')'
          'Free ds('panels')'
        end
      end
    end
    When type = 'SKELS' then do
      if skels = null then do
        skels = "'"targhlq"."type"'"
        if sysdsn(skel) /= 'OK' then do
          'Alloc new tracks spa(15,15) dir(12) new' ,
            'dsname('skels')'
          'Free ds('skels')'
        end
      end
    end
    Otherwise nop
  end
  member.0 = rec
  say "Creating element: '"targhlq"."type"("member")'"
  "Alloc f("dd") ds('"targhlq"."type"("member")') shr reuse"
  'Execio * diskw' dd '(finis stem member.'
  'Free f('dd')'
  drop member.
  rec = 0
  Address ISREdit
  return

Fixup_dsn: procedure
  arg cddsn
  if cddsn = null then return
  Select
    When left(cddsn,1) = "'" then do
      wdsn = substr(cddsn,2,length(cddsn)-2)
    end
    When left(cddsn,length(sysvar('syspref'))) = sysvar('syspref')
    then wdsn = cddsn
    When left(cddsn,length(sysvar('sysuid'))) = sysvar('sysuid')
    then wdsn = cddsn
    Otherwise do
      if sysvar('syspref') = null
      then do
        hlq = sysvar('sysuid')
        wdsn = cddsn
      end
      else do
        hlq = sysvar('syspref')
        wdsn = hlq'.'cddsn
      end
    end
  end
  return wdsn
